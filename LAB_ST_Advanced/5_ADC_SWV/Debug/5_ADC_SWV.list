
5_ADC_SWV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004014  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080041ec  080041ec  000051ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041fc  080041fc  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  080041fc  080041fc  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041fc  080041fc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041fc  080041fc  000051fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004200  08004200  00005200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004204  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002154  2000000c  08004210  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002160  08004210  00006160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123dc  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027f7  00000000  00000000  00018418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0001ac10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e7a  00000000  00000000  0001bee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f48a  00000000  00000000  0001cd5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013815  00000000  00000000  0003c1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3fe4  00000000  00000000  0004f9f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001239dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050cc  00000000  00000000  00123a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00128aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080041d4 	.word	0x080041d4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080041d4 	.word	0x080041d4

08000218 <DAC_Ch1_Start>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void DAC_Ch1_Start(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* Enable DAC channel 2 */
  if(HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK){
 800021c:	2100      	movs	r1, #0
 800021e:	480c      	ldr	r0, [pc, #48]	@ (8000250 <DAC_Ch1_Start+0x38>)
 8000220:	f001 ffab 	bl	800217a <HAL_DAC_Start>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <DAC_Ch1_Start+0x16>
    Error_Handler();
 800022a:	f000 fa3f 	bl	80006ac <Error_Handler>
  }

  /* Set DAC channel 2 DHR12RD register */
  if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0x100) != HAL_OK){
 800022e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000232:	2200      	movs	r2, #0
 8000234:	2100      	movs	r1, #0
 8000236:	4806      	ldr	r0, [pc, #24]	@ (8000250 <DAC_Ch1_Start+0x38>)
 8000238:	f001 fff2 	bl	8002220 <HAL_DAC_SetValue>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <DAC_Ch1_Start+0x2e>
    Error_Handler();
 8000242:	f000 fa33 	bl	80006ac <Error_Handler>
  }

  /* Enable TIM peripheral */
  HAL_TIM_Base_Start(&htim6);
 8000246:	4803      	ldr	r0, [pc, #12]	@ (8000254 <DAC_Ch1_Start+0x3c>)
 8000248:	f003 fe24 	bl	8003e94 <HAL_TIM_Base_Start>
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	200000f4 	.word	0x200000f4
 8000254:	20000108 	.word	0x20000108

08000258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800025e:	f000 fba4 	bl	80009aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000262:	f000 f851 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000266:	f000 f9b7 	bl	80005d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800026a:	f000 f98b 	bl	8000584 <MX_DMA_Init>
  MX_ADC1_Init();
 800026e:	f000 f897 	bl	80003a0 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000272:	f000 f90d 	bl	8000490 <MX_DAC1_Init>
  MX_TIM6_Init();
 8000276:	f000 f94f 	bl	8000518 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  DAC_Ch1_Start();
 800027a:	f7ff ffcd 	bl	8000218 <DAC_Ch1_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
 800027e:	e007      	b.n	8000290 <main+0x38>
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000280:	2120      	movs	r1, #32
 8000282:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000286:	f002 fdf7 	bl	8002e78 <HAL_GPIO_TogglePin>
	    HAL_Delay(100);
 800028a:	2064      	movs	r0, #100	@ 0x64
 800028c:	f000 fbfe 	bl	8000a8c <HAL_Delay>
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
 8000290:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000294:	4817      	ldr	r0, [pc, #92]	@ (80002f4 <main+0x9c>)
 8000296:	f002 fdbf 	bl	8002e18 <HAL_GPIO_ReadPin>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d0ef      	beq.n	8000280 <main+0x28>
	  }
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2120      	movs	r1, #32
 80002a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002a8:	f002 fdce 	bl	8002e48 <HAL_GPIO_WritePin>

	  /* Start ADC conversion from PA1 */
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_buff, 4096);
 80002ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80002b0:	4911      	ldr	r1, [pc, #68]	@ (80002f8 <main+0xa0>)
 80002b2:	4812      	ldr	r0, [pc, #72]	@ (80002fc <main+0xa4>)
 80002b4:	f000 ffb8 	bl	8001228 <HAL_ADC_Start_DMA>
	  while(ADC_ConvCpltFlag == 0);
 80002b8:	bf00      	nop
 80002ba:	4b11      	ldr	r3, [pc, #68]	@ (8000300 <main+0xa8>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d0fb      	beq.n	80002ba <main+0x62>
	  ADC_ConvCpltFlag = 0;
 80002c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000300 <main+0xa8>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	601a      	str	r2, [r3, #0]

	  /* Display ADC_monitor value using SWV data trace */
	  for(tmp=0;tmp<4096;tmp++){
 80002c8:	2300      	movs	r3, #0
 80002ca:	80fb      	strh	r3, [r7, #6]
 80002cc:	e00c      	b.n	80002e8 <main+0x90>
	    ADC_monitor = *((uint16_t*)ADC_buff+tmp);
 80002ce:	88fb      	ldrh	r3, [r7, #6]
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	4a09      	ldr	r2, [pc, #36]	@ (80002f8 <main+0xa0>)
 80002d4:	4413      	add	r3, r2
 80002d6:	881a      	ldrh	r2, [r3, #0]
 80002d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000304 <main+0xac>)
 80002da:	801a      	strh	r2, [r3, #0]
	    HAL_Delay(1);
 80002dc:	2001      	movs	r0, #1
 80002de:	f000 fbd5 	bl	8000a8c <HAL_Delay>
	  for(tmp=0;tmp<4096;tmp++){
 80002e2:	88fb      	ldrh	r3, [r7, #6]
 80002e4:	3301      	adds	r3, #1
 80002e6:	80fb      	strh	r3, [r7, #6]
 80002e8:	88fb      	ldrh	r3, [r7, #6]
 80002ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80002ee:	d3ee      	bcc.n	80002ce <main+0x76>
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET){
 80002f0:	e7ce      	b.n	8000290 <main+0x38>
 80002f2:	bf00      	nop
 80002f4:	48000800 	.word	0x48000800
 80002f8:	2000015c 	.word	0x2000015c
 80002fc:	20000028 	.word	0x20000028
 8000300:	20000154 	.word	0x20000154
 8000304:	20000158 	.word	0x20000158

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b094      	sub	sp, #80	@ 0x50
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0318 	add.w	r3, r7, #24
 8000312:	2238      	movs	r2, #56	@ 0x38
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f003 ff30 	bl	800417c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800032a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800032e:	f002 fdbd 	bl	8002eac <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000332:	2302      	movs	r3, #2
 8000334:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000336:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800033a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800033c:	2340      	movs	r3, #64	@ 0x40
 800033e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000340:	2302      	movs	r3, #2
 8000342:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000344:	2302      	movs	r3, #2
 8000346:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000348:	2301      	movs	r3, #1
 800034a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 800034c:	230a      	movs	r3, #10
 800034e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000350:	2302      	movs	r3, #2
 8000352:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000354:	2302      	movs	r3, #2
 8000356:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000358:	2302      	movs	r3, #2
 800035a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800035c:	f107 0318 	add.w	r3, r7, #24
 8000360:	4618      	mov	r0, r3
 8000362:	f002 fe47 	bl	8002ff4 <HAL_RCC_OscConfig>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800036c:	f000 f99e 	bl	80006ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000370:	230f      	movs	r3, #15
 8000372:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000374:	2303      	movs	r3, #3
 8000376:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800037c:	2300      	movs	r3, #0
 800037e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000380:	2300      	movs	r3, #0
 8000382:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2102      	movs	r1, #2
 8000388:	4618      	mov	r0, r3
 800038a:	f003 f94b 	bl	8003624 <HAL_RCC_ClockConfig>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000394:	f000 f98a 	bl	80006ac <Error_Handler>
  }
}
 8000398:	bf00      	nop
 800039a:	3750      	adds	r7, #80	@ 0x50
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}

080003a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08c      	sub	sp, #48	@ 0x30
 80003a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2220      	movs	r2, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	4618      	mov	r0, r3
 80003ba:	f003 fedf 	bl	800417c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003be:	4b32      	ldr	r3, [pc, #200]	@ (8000488 <MX_ADC1_Init+0xe8>)
 80003c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80003c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80003c6:	4b30      	ldr	r3, [pc, #192]	@ (8000488 <MX_ADC1_Init+0xe8>)
 80003c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80003cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003ce:	4b2e      	ldr	r3, [pc, #184]	@ (8000488 <MX_ADC1_Init+0xe8>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000488 <MX_ADC1_Init+0xe8>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80003da:	4b2b      	ldr	r3, [pc, #172]	@ (8000488 <MX_ADC1_Init+0xe8>)
 80003dc:	2200      	movs	r2, #0
 80003de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003e0:	4b29      	ldr	r3, [pc, #164]	@ (8000488 <MX_ADC1_Init+0xe8>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003e6:	4b28      	ldr	r3, [pc, #160]	@ (8000488 <MX_ADC1_Init+0xe8>)
 80003e8:	2204      	movs	r2, #4
 80003ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003ec:	4b26      	ldr	r3, [pc, #152]	@ (8000488 <MX_ADC1_Init+0xe8>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003f2:	4b25      	ldr	r3, [pc, #148]	@ (8000488 <MX_ADC1_Init+0xe8>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80003f8:	4b23      	ldr	r3, [pc, #140]	@ (8000488 <MX_ADC1_Init+0xe8>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003fe:	4b22      	ldr	r3, [pc, #136]	@ (8000488 <MX_ADC1_Init+0xe8>)
 8000400:	2200      	movs	r2, #0
 8000402:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000406:	4b20      	ldr	r3, [pc, #128]	@ (8000488 <MX_ADC1_Init+0xe8>)
 8000408:	2200      	movs	r2, #0
 800040a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800040c:	4b1e      	ldr	r3, [pc, #120]	@ (8000488 <MX_ADC1_Init+0xe8>)
 800040e:	2200      	movs	r2, #0
 8000410:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000412:	4b1d      	ldr	r3, [pc, #116]	@ (8000488 <MX_ADC1_Init+0xe8>)
 8000414:	2200      	movs	r2, #0
 8000416:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800041a:	4b1b      	ldr	r3, [pc, #108]	@ (8000488 <MX_ADC1_Init+0xe8>)
 800041c:	2200      	movs	r2, #0
 800041e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000420:	4b19      	ldr	r3, [pc, #100]	@ (8000488 <MX_ADC1_Init+0xe8>)
 8000422:	2200      	movs	r2, #0
 8000424:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000428:	4817      	ldr	r0, [pc, #92]	@ (8000488 <MX_ADC1_Init+0xe8>)
 800042a:	f000 fd73 	bl	8000f14 <HAL_ADC_Init>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000434:	f000 f93a 	bl	80006ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000438:	2300      	movs	r3, #0
 800043a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800043c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000440:	4619      	mov	r1, r3
 8000442:	4811      	ldr	r0, [pc, #68]	@ (8000488 <MX_ADC1_Init+0xe8>)
 8000444:	f001 fcc4 	bl	8001dd0 <HAL_ADCEx_MultiModeConfigChannel>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800044e:	f000 f92d 	bl	80006ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <MX_ADC1_Init+0xec>)
 8000454:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000456:	2306      	movs	r3, #6
 8000458:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800045a:	2300      	movs	r3, #0
 800045c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800045e:	237f      	movs	r3, #127	@ 0x7f
 8000460:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000462:	2304      	movs	r3, #4
 8000464:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000466:	2300      	movs	r3, #0
 8000468:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	4619      	mov	r1, r3
 800046e:	4806      	ldr	r0, [pc, #24]	@ (8000488 <MX_ADC1_Init+0xe8>)
 8000470:	f000 ffa2 	bl	80013b8 <HAL_ADC_ConfigChannel>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800047a:	f000 f917 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	3730      	adds	r7, #48	@ 0x30
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	20000028 	.word	0x20000028
 800048c:	08600004 	.word	0x08600004

08000490 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b08c      	sub	sp, #48	@ 0x30
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000496:	463b      	mov	r3, r7
 8000498:	2230      	movs	r2, #48	@ 0x30
 800049a:	2100      	movs	r1, #0
 800049c:	4618      	mov	r0, r3
 800049e:	f003 fe6d 	bl	800417c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80004a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000510 <MX_DAC1_Init+0x80>)
 80004a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000514 <MX_DAC1_Init+0x84>)
 80004a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004a8:	4819      	ldr	r0, [pc, #100]	@ (8000510 <MX_DAC1_Init+0x80>)
 80004aa:	f001 fe44 	bl	8002136 <HAL_DAC_Init>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d001      	beq.n	80004b8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80004b4:	f000 f8fa 	bl	80006ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80004b8:	2302      	movs	r3, #2
 80004ba:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80004bc:	2300      	movs	r3, #0
 80004be:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80004c8:	231e      	movs	r3, #30
 80004ca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80004cc:	2300      	movs	r3, #0
 80004ce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80004d4:	2301      	movs	r3, #1
 80004d6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004d8:	2300      	movs	r3, #0
 80004da:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004dc:	463b      	mov	r3, r7
 80004de:	2200      	movs	r2, #0
 80004e0:	4619      	mov	r1, r3
 80004e2:	480b      	ldr	r0, [pc, #44]	@ (8000510 <MX_DAC1_Init+0x80>)
 80004e4:	f001 fec4 	bl	8002270 <HAL_DAC_ConfigChannel>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80004ee:	f000 f8dd 	bl	80006ac <Error_Handler>
  }

  /** Configure Triangle wave generation on DAC OUT1
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_1023) != HAL_OK)
 80004f2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80004f6:	2100      	movs	r1, #0
 80004f8:	4805      	ldr	r0, [pc, #20]	@ (8000510 <MX_DAC1_Init+0x80>)
 80004fa:	f002 f861 	bl	80025c0 <HAL_DACEx_TriangleWaveGenerate>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000504:	f000 f8d2 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000508:	bf00      	nop
 800050a:	3730      	adds	r7, #48	@ 0x30
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	200000f4 	.word	0x200000f4
 8000514:	50000800 	.word	0x50000800

08000518 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000528:	4b14      	ldr	r3, [pc, #80]	@ (800057c <MX_TIM6_Init+0x64>)
 800052a:	4a15      	ldr	r2, [pc, #84]	@ (8000580 <MX_TIM6_Init+0x68>)
 800052c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800052e:	4b13      	ldr	r3, [pc, #76]	@ (800057c <MX_TIM6_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000534:	4b11      	ldr	r3, [pc, #68]	@ (800057c <MX_TIM6_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9;
 800053a:	4b10      	ldr	r3, [pc, #64]	@ (800057c <MX_TIM6_Init+0x64>)
 800053c:	2209      	movs	r2, #9
 800053e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000540:	4b0e      	ldr	r3, [pc, #56]	@ (800057c <MX_TIM6_Init+0x64>)
 8000542:	2200      	movs	r2, #0
 8000544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000546:	480d      	ldr	r0, [pc, #52]	@ (800057c <MX_TIM6_Init+0x64>)
 8000548:	f003 fc4c 	bl	8003de4 <HAL_TIM_Base_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000552:	f000 f8ab 	bl	80006ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000556:	2320      	movs	r3, #32
 8000558:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055a:	2300      	movs	r3, #0
 800055c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	4619      	mov	r1, r3
 8000562:	4806      	ldr	r0, [pc, #24]	@ (800057c <MX_TIM6_Init+0x64>)
 8000564:	f003 fd88 	bl	8004078 <HAL_TIMEx_MasterConfigSynchronization>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800056e:	f000 f89d 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000108 	.word	0x20000108
 8000580:	40001000 	.word	0x40001000

08000584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800058a:	4b12      	ldr	r3, [pc, #72]	@ (80005d4 <MX_DMA_Init+0x50>)
 800058c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800058e:	4a11      	ldr	r2, [pc, #68]	@ (80005d4 <MX_DMA_Init+0x50>)
 8000590:	f043 0304 	orr.w	r3, r3, #4
 8000594:	6493      	str	r3, [r2, #72]	@ 0x48
 8000596:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <MX_DMA_Init+0x50>)
 8000598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800059a:	f003 0304 	and.w	r3, r3, #4
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a2:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <MX_DMA_Init+0x50>)
 80005a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005a6:	4a0b      	ldr	r2, [pc, #44]	@ (80005d4 <MX_DMA_Init+0x50>)
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <MX_DMA_Init+0x50>)
 80005b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2100      	movs	r1, #0
 80005be:	200b      	movs	r0, #11
 80005c0:	f001 fd85 	bl	80020ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005c4:	200b      	movs	r0, #11
 80005c6:	f001 fd9c 	bl	8002102 <HAL_NVIC_EnableIRQ>

}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	40021000 	.word	0x40021000

080005d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ee:	4b25      	ldr	r3, [pc, #148]	@ (8000684 <MX_GPIO_Init+0xac>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f2:	4a24      	ldr	r2, [pc, #144]	@ (8000684 <MX_GPIO_Init+0xac>)
 80005f4:	f043 0304 	orr.w	r3, r3, #4
 80005f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005fa:	4b22      	ldr	r3, [pc, #136]	@ (8000684 <MX_GPIO_Init+0xac>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fe:	f003 0304 	and.w	r3, r3, #4
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <MX_GPIO_Init+0xac>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800060a:	4a1e      	ldr	r2, [pc, #120]	@ (8000684 <MX_GPIO_Init+0xac>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000612:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <MX_GPIO_Init+0xac>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <MX_GPIO_Init+0xac>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000622:	4a18      	ldr	r2, [pc, #96]	@ (8000684 <MX_GPIO_Init+0xac>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800062a:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <MX_GPIO_Init+0xac>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2120      	movs	r1, #32
 800063a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063e:	f002 fc03 	bl	8002e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000642:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000648:	2300      	movs	r3, #0
 800064a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	4619      	mov	r1, r3
 8000656:	480c      	ldr	r0, [pc, #48]	@ (8000688 <MX_GPIO_Init+0xb0>)
 8000658:	f002 fa5c 	bl	8002b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800065c:	2320      	movs	r3, #32
 800065e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	4619      	mov	r1, r3
 8000672:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000676:	f002 fa4d 	bl	8002b14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800067a:	bf00      	nop
 800067c:	3720      	adds	r7, #32
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40021000 	.word	0x40021000
 8000688:	48000800 	.word	0x48000800

0800068c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  ADC_ConvCpltFlag = 1;
 8000694:	4b04      	ldr	r3, [pc, #16]	@ (80006a8 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000696:	2201      	movs	r2, #1
 8000698:	601a      	str	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000154 	.word	0x20000154

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	bf00      	nop
 80006b6:	e7fd      	b.n	80006b4 <Error_Handler+0x8>

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <HAL_MspInit+0x44>)
 80006c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006c2:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <HAL_MspInit+0x44>)
 80006c4:	f043 0301 	orr.w	r3, r3, #1
 80006c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <HAL_MspInit+0x44>)
 80006cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <HAL_MspInit+0x44>)
 80006d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006da:	4a08      	ldr	r2, [pc, #32]	@ (80006fc <HAL_MspInit+0x44>)
 80006dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80006e2:	4b06      	ldr	r3, [pc, #24]	@ (80006fc <HAL_MspInit+0x44>)
 80006e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40021000 	.word	0x40021000

08000700 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b09a      	sub	sp, #104	@ 0x68
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	2244      	movs	r2, #68	@ 0x44
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f003 fd2b 	bl	800417c <memset>
  if(hadc->Instance==ADC1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800072e:	d15f      	bne.n	80007f0 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000730:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000734:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000736:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800073a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4618      	mov	r0, r3
 8000742:	f003 f95f 	bl	8003a04 <HAL_RCCEx_PeriphCLKConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800074c:	f7ff ffae 	bl	80006ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000750:	4b29      	ldr	r3, [pc, #164]	@ (80007f8 <HAL_ADC_MspInit+0xf8>)
 8000752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000754:	4a28      	ldr	r2, [pc, #160]	@ (80007f8 <HAL_ADC_MspInit+0xf8>)
 8000756:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800075a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075c:	4b26      	ldr	r3, [pc, #152]	@ (80007f8 <HAL_ADC_MspInit+0xf8>)
 800075e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000768:	4b23      	ldr	r3, [pc, #140]	@ (80007f8 <HAL_ADC_MspInit+0xf8>)
 800076a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076c:	4a22      	ldr	r2, [pc, #136]	@ (80007f8 <HAL_ADC_MspInit+0xf8>)
 800076e:	f043 0301 	orr.w	r3, r3, #1
 8000772:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000774:	4b20      	ldr	r3, [pc, #128]	@ (80007f8 <HAL_ADC_MspInit+0xf8>)
 8000776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000778:	f003 0301 	and.w	r3, r3, #1
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000780:	2302      	movs	r3, #2
 8000782:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000784:	2303      	movs	r3, #3
 8000786:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000790:	4619      	mov	r1, r3
 8000792:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000796:	f002 f9bd 	bl	8002b14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800079a:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <HAL_ADC_MspInit+0xfc>)
 800079c:	4a18      	ldr	r2, [pc, #96]	@ (8000800 <HAL_ADC_MspInit+0x100>)
 800079e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80007a0:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <HAL_ADC_MspInit+0xfc>)
 80007a2:	2205      	movs	r2, #5
 80007a4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007a6:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <HAL_ADC_MspInit+0xfc>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007ac:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <HAL_ADC_MspInit+0xfc>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80007b2:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <HAL_ADC_MspInit+0xfc>)
 80007b4:	2280      	movs	r2, #128	@ 0x80
 80007b6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007b8:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <HAL_ADC_MspInit+0xfc>)
 80007ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007be:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007c0:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <HAL_ADC_MspInit+0xfc>)
 80007c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80007c6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <HAL_ADC_MspInit+0xfc>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <HAL_ADC_MspInit+0xfc>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007d4:	4809      	ldr	r0, [pc, #36]	@ (80007fc <HAL_ADC_MspInit+0xfc>)
 80007d6:	f001 ff2b 	bl	8002630 <HAL_DMA_Init>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 80007e0:	f7ff ff64 	bl	80006ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a05      	ldr	r2, [pc, #20]	@ (80007fc <HAL_ADC_MspInit+0xfc>)
 80007e8:	655a      	str	r2, [r3, #84]	@ 0x54
 80007ea:	4a04      	ldr	r2, [pc, #16]	@ (80007fc <HAL_ADC_MspInit+0xfc>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80007f0:	bf00      	nop
 80007f2:	3768      	adds	r7, #104	@ 0x68
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40021000 	.word	0x40021000
 80007fc:	20000094 	.word	0x20000094
 8000800:	40020008 	.word	0x40020008

08000804 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	@ 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a15      	ldr	r2, [pc, #84]	@ (8000878 <HAL_DAC_MspInit+0x74>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d124      	bne.n	8000870 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000826:	4b15      	ldr	r3, [pc, #84]	@ (800087c <HAL_DAC_MspInit+0x78>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082a:	4a14      	ldr	r2, [pc, #80]	@ (800087c <HAL_DAC_MspInit+0x78>)
 800082c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000830:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000832:	4b12      	ldr	r3, [pc, #72]	@ (800087c <HAL_DAC_MspInit+0x78>)
 8000834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000836:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <HAL_DAC_MspInit+0x78>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000842:	4a0e      	ldr	r2, [pc, #56]	@ (800087c <HAL_DAC_MspInit+0x78>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800084a:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <HAL_DAC_MspInit+0x78>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000856:	2310      	movs	r3, #16
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085a:	2303      	movs	r3, #3
 800085c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086c:	f002 f952 	bl	8002b14 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000870:	bf00      	nop
 8000872:	3728      	adds	r7, #40	@ 0x28
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	50000800 	.word	0x50000800
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <HAL_TIM_Base_MspInit+0x38>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d10b      	bne.n	80008aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000892:	4b0a      	ldr	r3, [pc, #40]	@ (80008bc <HAL_TIM_Base_MspInit+0x3c>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000896:	4a09      	ldr	r2, [pc, #36]	@ (80008bc <HAL_TIM_Base_MspInit+0x3c>)
 8000898:	f043 0310 	orr.w	r3, r3, #16
 800089c:	6593      	str	r3, [r2, #88]	@ 0x58
 800089e:	4b07      	ldr	r3, [pc, #28]	@ (80008bc <HAL_TIM_Base_MspInit+0x3c>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a2:	f003 0310 	and.w	r3, r3, #16
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40001000 	.word	0x40001000
 80008bc:	40021000 	.word	0x40021000

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c4:	bf00      	nop
 80008c6:	e7fd      	b.n	80008c4 <NMI_Handler+0x4>

080008c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008cc:	bf00      	nop
 80008ce:	e7fd      	b.n	80008cc <HardFault_Handler+0x4>

080008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d4:	bf00      	nop
 80008d6:	e7fd      	b.n	80008d4 <MemManage_Handler+0x4>

080008d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000916:	f000 f89b 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000924:	4802      	ldr	r0, [pc, #8]	@ (8000930 <DMA1_Channel1_IRQHandler+0x10>)
 8000926:	f001 ffa6 	bl	8002876 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000094 	.word	0x20000094

08000934 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000958:	480d      	ldr	r0, [pc, #52]	@ (8000990 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800095a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800095c:	480d      	ldr	r0, [pc, #52]	@ (8000994 <LoopForever+0x6>)
  ldr r1, =_edata
 800095e:	490e      	ldr	r1, [pc, #56]	@ (8000998 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000960:	4a0e      	ldr	r2, [pc, #56]	@ (800099c <LoopForever+0xe>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0b      	ldr	r2, [pc, #44]	@ (80009a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000974:	4c0b      	ldr	r4, [pc, #44]	@ (80009a4 <LoopForever+0x16>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000982:	f7ff ffd7 	bl	8000934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000986:	f003 fc01 	bl	800418c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800098a:	f7ff fc65 	bl	8000258 <main>

0800098e <LoopForever>:

LoopForever:
    b LoopForever
 800098e:	e7fe      	b.n	800098e <LoopForever>
  ldr   r0, =_estack
 8000990:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000998:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800099c:	08004204 	.word	0x08004204
  ldr r2, =_sbss
 80009a0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a4:	20002160 	.word	0x20002160

080009a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC1_2_IRQHandler>

080009aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b4:	2003      	movs	r0, #3
 80009b6:	f001 fb7f 	bl	80020b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009ba:	200f      	movs	r0, #15
 80009bc:	f000 f80e 	bl	80009dc <HAL_InitTick>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d002      	beq.n	80009cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	71fb      	strb	r3, [r7, #7]
 80009ca:	e001      	b.n	80009d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009cc:	f7ff fe74 	bl	80006b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009d0:	79fb      	ldrb	r3, [r7, #7]

}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009e8:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <HAL_InitTick+0x68>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d022      	beq.n	8000a36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009f0:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <HAL_InitTick+0x6c>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <HAL_InitTick+0x68>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80009fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 fb8a 	bl	800211e <HAL_SYSTICK_Config>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d10f      	bne.n	8000a30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2b0f      	cmp	r3, #15
 8000a14:	d809      	bhi.n	8000a2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a16:	2200      	movs	r2, #0
 8000a18:	6879      	ldr	r1, [r7, #4]
 8000a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1e:	f001 fb56 	bl	80020ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a22:	4a0a      	ldr	r2, [pc, #40]	@ (8000a4c <HAL_InitTick+0x70>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	e007      	b.n	8000a3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	73fb      	strb	r3, [r7, #15]
 8000a2e:	e004      	b.n	8000a3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	73fb      	strb	r3, [r7, #15]
 8000a34:	e001      	b.n	8000a3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000008 	.word	0x20000008
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000004 	.word	0x20000004

08000a50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <HAL_IncTick+0x1c>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <HAL_IncTick+0x20>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	4a03      	ldr	r2, [pc, #12]	@ (8000a6c <HAL_IncTick+0x1c>)
 8000a60:	6013      	str	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	2000215c 	.word	0x2000215c
 8000a70:	20000008 	.word	0x20000008

08000a74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return uwTick;
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <HAL_GetTick+0x14>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	2000215c 	.word	0x2000215c

08000a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a94:	f7ff ffee 	bl	8000a74 <HAL_GetTick>
 8000a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa4:	d004      	beq.n	8000ab0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aa6:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <HAL_Delay+0x40>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	68fa      	ldr	r2, [r7, #12]
 8000aac:	4413      	add	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ab0:	bf00      	nop
 8000ab2:	f7ff ffdf 	bl	8000a74 <HAL_GetTick>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	1ad3      	subs	r3, r2, r3
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d8f7      	bhi.n	8000ab2 <HAL_Delay+0x26>
  {
  }
}
 8000ac2:	bf00      	nop
 8000ac4:	bf00      	nop
 8000ac6:	3710      	adds	r7, #16
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000008 	.word	0x20000008

08000ad0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr

08000af6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000af6:	b480      	push	{r7}
 8000af8:	b083      	sub	sp, #12
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
 8000afe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
 8000b44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3360      	adds	r3, #96	@ 0x60
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	4413      	add	r3, r2
 8000b52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <LL_ADC_SetOffset+0x44>)
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	687a      	ldr	r2, [r7, #4]
 8000b5e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000b62:	683a      	ldr	r2, [r7, #0]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	4313      	orrs	r3, r2
 8000b68:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000b70:	bf00      	nop
 8000b72:	371c      	adds	r7, #28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	03fff000 	.word	0x03fff000

08000b80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3360      	adds	r3, #96	@ 0x60
 8000b8e:	461a      	mov	r2, r3
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	4413      	add	r3, r2
 8000b96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b087      	sub	sp, #28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3360      	adds	r3, #96	@ 0x60
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	4413      	add	r3, r2
 8000bc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000bd6:	bf00      	nop
 8000bd8:	371c      	adds	r7, #28
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b087      	sub	sp, #28
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	3360      	adds	r3, #96	@ 0x60
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	4413      	add	r3, r2
 8000bfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	431a      	orrs	r2, r3
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000c0c:	bf00      	nop
 8000c0e:	371c      	adds	r7, #28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	3360      	adds	r3, #96	@ 0x60
 8000c28:	461a      	mov	r2, r3
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	431a      	orrs	r2, r3
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000c42:	bf00      	nop
 8000c44:	371c      	adds	r7, #28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b083      	sub	sp, #12
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
 8000c56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	695b      	ldr	r3, [r3, #20]
 8000c5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	431a      	orrs	r2, r3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	615a      	str	r2, [r3, #20]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e000      	b.n	8000c8e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b087      	sub	sp, #28
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	3330      	adds	r3, #48	@ 0x30
 8000caa:	461a      	mov	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	0a1b      	lsrs	r3, r3, #8
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	f003 030c 	and.w	r3, r3, #12
 8000cb6:	4413      	add	r3, r2
 8000cb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	f003 031f 	and.w	r3, r3, #31
 8000cc4:	211f      	movs	r1, #31
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	401a      	ands	r2, r3
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	0e9b      	lsrs	r3, r3, #26
 8000cd2:	f003 011f 	and.w	r1, r3, #31
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	f003 031f 	and.w	r3, r3, #31
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ce6:	bf00      	nop
 8000ce8:	371c      	adds	r7, #28
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	b087      	sub	sp, #28
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	60f8      	str	r0, [r7, #12]
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	3314      	adds	r3, #20
 8000d02:	461a      	mov	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	0e5b      	lsrs	r3, r3, #25
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	4413      	add	r3, r2
 8000d10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	0d1b      	lsrs	r3, r3, #20
 8000d1a:	f003 031f 	and.w	r3, r3, #31
 8000d1e:	2107      	movs	r1, #7
 8000d20:	fa01 f303 	lsl.w	r3, r1, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	401a      	ands	r2, r3
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	0d1b      	lsrs	r3, r3, #20
 8000d2c:	f003 031f 	and.w	r3, r3, #31
 8000d30:	6879      	ldr	r1, [r7, #4]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	431a      	orrs	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d3c:	bf00      	nop
 8000d3e:	371c      	adds	r7, #28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr

08000d48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a0f      	ldr	r2, [pc, #60]	@ (8000d94 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d10a      	bne.n	8000d72 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8000d70:	e00a      	b.n	8000d88 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	401a      	ands	r2, r3
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	407f0000 	.word	0x407f0000

08000d98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	f003 031f 	and.w	r3, r3, #31
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000dc4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	6093      	str	r3, [r2, #8]
}
 8000dcc:	bf00      	nop
 8000dce:	370c      	adds	r7, #12
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000de8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000dec:	d101      	bne.n	8000df2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000dee:	2301      	movs	r3, #1
 8000df0:	e000      	b.n	8000df4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000e10:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e14:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000e3c:	d101      	bne.n	8000e42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000e60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000e64:	f043 0201 	orr.w	r2, r3, #1
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d101      	bne.n	8000e90 <LL_ADC_IsEnabled+0x18>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e000      	b.n	8000e92 <LL_ADC_IsEnabled+0x1a>
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	689b      	ldr	r3, [r3, #8]
 8000eaa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000eae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000eb2:	f043 0204 	orr.w	r2, r3, #4
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	d101      	bne.n	8000ede <LL_ADC_REG_IsConversionOngoing+0x18>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ede:	2300      	movs	r3, #0
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f003 0308 	and.w	r3, r3, #8
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d101      	bne.n	8000f04 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000f00:	2301      	movs	r3, #1
 8000f02:	e000      	b.n	8000f06 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b089      	sub	sp, #36	@ 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e177      	b.n	800121e <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d109      	bne.n	8000f50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff fbdf 	bl	8000700 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff3f 	bl	8000dd8 <LL_ADC_IsDeepPowerDownEnabled>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d004      	beq.n	8000f6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff ff25 	bl	8000db4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff5a 	bl	8000e28 <LL_ADC_IsInternalRegulatorEnabled>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d115      	bne.n	8000fa6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff3e 	bl	8000e00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f84:	4b9c      	ldr	r3, [pc, #624]	@ (80011f8 <HAL_ADC_Init+0x2e4>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	099b      	lsrs	r3, r3, #6
 8000f8a:	4a9c      	ldr	r2, [pc, #624]	@ (80011fc <HAL_ADC_Init+0x2e8>)
 8000f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f90:	099b      	lsrs	r3, r3, #6
 8000f92:	3301      	adds	r3, #1
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000f98:	e002      	b.n	8000fa0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f9      	bne.n	8000f9a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff3c 	bl	8000e28 <LL_ADC_IsInternalRegulatorEnabled>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10d      	bne.n	8000fd2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fba:	f043 0210 	orr.w	r2, r3, #16
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc6:	f043 0201 	orr.w	r2, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ff75 	bl	8000ec6 <LL_ADC_REG_IsConversionOngoing>
 8000fdc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fe2:	f003 0310 	and.w	r3, r3, #16
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	f040 8110 	bne.w	800120c <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f040 810c 	bne.w	800120c <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ff8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000ffc:	f043 0202 	orr.w	r2, r3, #2
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff35 	bl	8000e78 <LL_ADC_IsEnabled>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d111      	bne.n	8001038 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001014:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001018:	f7ff ff2e 	bl	8000e78 <LL_ADC_IsEnabled>
 800101c:	4604      	mov	r4, r0
 800101e:	4878      	ldr	r0, [pc, #480]	@ (8001200 <HAL_ADC_Init+0x2ec>)
 8001020:	f7ff ff2a 	bl	8000e78 <LL_ADC_IsEnabled>
 8001024:	4603      	mov	r3, r0
 8001026:	4323      	orrs	r3, r4
 8001028:	2b00      	cmp	r3, #0
 800102a:	d105      	bne.n	8001038 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	4619      	mov	r1, r3
 8001032:	4874      	ldr	r0, [pc, #464]	@ (8001204 <HAL_ADC_Init+0x2f0>)
 8001034:	f7ff fd4c 	bl	8000ad0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7f5b      	ldrb	r3, [r3, #29]
 800103c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001042:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001048:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800104e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001056:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001062:	2b01      	cmp	r3, #1
 8001064:	d106      	bne.n	8001074 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800106a:	3b01      	subs	r3, #1
 800106c:	045b      	lsls	r3, r3, #17
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001078:	2b00      	cmp	r3, #0
 800107a:	d009      	beq.n	8001090 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001080:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001088:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	68da      	ldr	r2, [r3, #12]
 8001096:	4b5c      	ldr	r3, [pc, #368]	@ (8001208 <HAL_ADC_Init+0x2f4>)
 8001098:	4013      	ands	r3, r2
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	69b9      	ldr	r1, [r7, #24]
 80010a0:	430b      	orrs	r3, r1
 80010a2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff01 	bl	8000ec6 <LL_ADC_REG_IsConversionOngoing>
 80010c4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff0e 	bl	8000eec <LL_ADC_INJ_IsConversionOngoing>
 80010d0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d16d      	bne.n	80011b4 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d16a      	bne.n	80011b4 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80010e2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80010ea:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80010fa:	f023 0302 	bic.w	r3, r3, #2
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	69b9      	ldr	r1, [r7, #24]
 8001104:	430b      	orrs	r3, r1
 8001106:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d017      	beq.n	8001140 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	691a      	ldr	r2, [r3, #16]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800111e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001128:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800112c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6911      	ldr	r1, [r2, #16]
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	430b      	orrs	r3, r1
 800113a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800113e:	e013      	b.n	8001168 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800114e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001160:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001164:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800116e:	2b01      	cmp	r3, #1
 8001170:	d118      	bne.n	80011a4 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800117c:	f023 0304 	bic.w	r3, r3, #4
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001188:	4311      	orrs	r1, r2
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800118e:	4311      	orrs	r1, r2
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001194:	430a      	orrs	r2, r1
 8001196:	431a      	orrs	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f042 0201 	orr.w	r2, r2, #1
 80011a0:	611a      	str	r2, [r3, #16]
 80011a2:	e007      	b.n	80011b4 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 0201 	bic.w	r2, r2, #1
 80011b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	695b      	ldr	r3, [r3, #20]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d10c      	bne.n	80011d6 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f023 010f 	bic.w	r1, r3, #15
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a1b      	ldr	r3, [r3, #32]
 80011ca:	1e5a      	subs	r2, r3, #1
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80011d4:	e007      	b.n	80011e6 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 020f 	bic.w	r2, r2, #15
 80011e4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011ea:	f023 0303 	bic.w	r3, r3, #3
 80011ee:	f043 0201 	orr.w	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80011f6:	e011      	b.n	800121c <HAL_ADC_Init+0x308>
 80011f8:	20000000 	.word	0x20000000
 80011fc:	053e2d63 	.word	0x053e2d63
 8001200:	50000100 	.word	0x50000100
 8001204:	50000300 	.word	0x50000300
 8001208:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001210:	f043 0210 	orr.w	r2, r3, #16
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800121c:	7ffb      	ldrb	r3, [r7, #31]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3724      	adds	r7, #36	@ 0x24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	bf00      	nop

08001228 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001234:	4851      	ldr	r0, [pc, #324]	@ (800137c <HAL_ADC_Start_DMA+0x154>)
 8001236:	f7ff fdaf 	bl	8000d98 <LL_ADC_GetMultimode>
 800123a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fe40 	bl	8000ec6 <LL_ADC_REG_IsConversionOngoing>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	f040 808f 	bne.w	800136c <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_ADC_Start_DMA+0x34>
 8001258:	2302      	movs	r3, #2
 800125a:	e08a      	b.n	8001372 <HAL_ADC_Start_DMA+0x14a>
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d005      	beq.n	8001276 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	2b05      	cmp	r3, #5
 800126e:	d002      	beq.n	8001276 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	2b09      	cmp	r3, #9
 8001274:	d173      	bne.n	800135e <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f000 fc8e 	bl	8001b98 <ADC_Enable>
 800127c:	4603      	mov	r3, r0
 800127e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001280:	7dfb      	ldrb	r3, [r7, #23]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d166      	bne.n	8001354 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800128a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a38      	ldr	r2, [pc, #224]	@ (8001380 <HAL_ADC_Start_DMA+0x158>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d002      	beq.n	80012aa <HAL_ADC_Start_DMA+0x82>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	e001      	b.n	80012ae <HAL_ADC_Start_DMA+0x86>
 80012aa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80012ae:	68fa      	ldr	r2, [r7, #12]
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d002      	beq.n	80012bc <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d105      	bne.n	80012c8 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012c0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d8:	f023 0206 	bic.w	r2, r3, #6
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	661a      	str	r2, [r3, #96]	@ 0x60
 80012e0:	e002      	b.n	80012e8 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012ec:	4a25      	ldr	r2, [pc, #148]	@ (8001384 <HAL_ADC_Start_DMA+0x15c>)
 80012ee:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012f4:	4a24      	ldr	r2, [pc, #144]	@ (8001388 <HAL_ADC_Start_DMA+0x160>)
 80012f6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012fc:	4a23      	ldr	r2, [pc, #140]	@ (800138c <HAL_ADC_Start_DMA+0x164>)
 80012fe:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	221c      	movs	r2, #28
 8001306:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2200      	movs	r2, #0
 800130c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0210 	orr.w	r2, r2, #16
 800131e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f042 0201 	orr.w	r2, r2, #1
 800132e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3340      	adds	r3, #64	@ 0x40
 800133a:	4619      	mov	r1, r3
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f001 fa1e 	bl	8002780 <HAL_DMA_Start_IT>
 8001344:	4603      	mov	r3, r0
 8001346:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fda6 	bl	8000e9e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001352:	e00d      	b.n	8001370 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800135c:	e008      	b.n	8001370 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800136a:	e001      	b.n	8001370 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800136c:	2302      	movs	r3, #2
 800136e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001370:	7dfb      	ldrb	r3, [r7, #23]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	50000300 	.word	0x50000300
 8001380:	50000100 	.word	0x50000100
 8001384:	08001c5d 	.word	0x08001c5d
 8001388:	08001d35 	.word	0x08001d35
 800138c:	08001d51 	.word	0x08001d51

08001390 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b0b6      	sub	sp, #216	@ 0xd8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80013c8:	2300      	movs	r3, #0
 80013ca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d101      	bne.n	80013da <HAL_ADC_ConfigChannel+0x22>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e3c8      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x7b4>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2201      	movs	r2, #1
 80013de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fd6d 	bl	8000ec6 <LL_ADC_REG_IsConversionOngoing>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 83ad 	bne.w	8001b4e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6818      	ldr	r0, [r3, #0]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	6859      	ldr	r1, [r3, #4]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	f7ff fc4a 	bl	8000c9a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fd5b 	bl	8000ec6 <LL_ADC_REG_IsConversionOngoing>
 8001410:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fd67 	bl	8000eec <LL_ADC_INJ_IsConversionOngoing>
 800141e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001422:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001426:	2b00      	cmp	r3, #0
 8001428:	f040 81d9 	bne.w	80017de <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800142c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001430:	2b00      	cmp	r3, #0
 8001432:	f040 81d4 	bne.w	80017de <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800143e:	d10f      	bne.n	8001460 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	f7ff fc51 	bl	8000cf2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fbf8 	bl	8000c4e <LL_ADC_SetSamplingTimeCommonConfig>
 800145e:	e00e      	b.n	800147e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	6819      	ldr	r1, [r3, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	461a      	mov	r2, r3
 800146e:	f7ff fc40 	bl	8000cf2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fbe8 	bl	8000c4e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	08db      	lsrs	r3, r3, #3
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	2b04      	cmp	r3, #4
 800149e:	d022      	beq.n	80014e6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6818      	ldr	r0, [r3, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	6919      	ldr	r1, [r3, #16]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80014b0:	f7ff fb42 	bl	8000b38 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6818      	ldr	r0, [r3, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	6919      	ldr	r1, [r3, #16]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	461a      	mov	r2, r3
 80014c2:	f7ff fb8e 	bl	8000be2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	6919      	ldr	r1, [r3, #16]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	7f1b      	ldrb	r3, [r3, #28]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d102      	bne.n	80014dc <HAL_ADC_ConfigChannel+0x124>
 80014d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014da:	e000      	b.n	80014de <HAL_ADC_ConfigChannel+0x126>
 80014dc:	2300      	movs	r3, #0
 80014de:	461a      	mov	r2, r3
 80014e0:	f7ff fb9a 	bl	8000c18 <LL_ADC_SetOffsetSaturation>
 80014e4:	e17b      	b.n	80017de <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fb47 	bl	8000b80 <LL_ADC_GetOffsetChannel>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d10a      	bne.n	8001512 <HAL_ADC_ConfigChannel+0x15a>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fb3c 	bl	8000b80 <LL_ADC_GetOffsetChannel>
 8001508:	4603      	mov	r3, r0
 800150a:	0e9b      	lsrs	r3, r3, #26
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	e01e      	b.n	8001550 <HAL_ADC_ConfigChannel+0x198>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff fb31 	bl	8000b80 <LL_ADC_GetOffsetChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001524:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001528:	fa93 f3a3 	rbit	r3, r3
 800152c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001530:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001534:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001538:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001540:	2320      	movs	r3, #32
 8001542:	e004      	b.n	800154e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001544:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001548:	fab3 f383 	clz	r3, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001558:	2b00      	cmp	r3, #0
 800155a:	d105      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x1b0>
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	0e9b      	lsrs	r3, r3, #26
 8001562:	f003 031f 	and.w	r3, r3, #31
 8001566:	e018      	b.n	800159a <HAL_ADC_ConfigChannel+0x1e2>
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001574:	fa93 f3a3 	rbit	r3, r3
 8001578:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800157c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001584:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800158c:	2320      	movs	r3, #32
 800158e:	e004      	b.n	800159a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001590:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001594:	fab3 f383 	clz	r3, r3
 8001598:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800159a:	429a      	cmp	r2, r3
 800159c:	d106      	bne.n	80015ac <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fb00 	bl	8000bac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fae4 	bl	8000b80 <LL_ADC_GetOffsetChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10a      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x220>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2101      	movs	r1, #1
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fad9 	bl	8000b80 <LL_ADC_GetOffsetChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	0e9b      	lsrs	r3, r3, #26
 80015d2:	f003 021f 	and.w	r2, r3, #31
 80015d6:	e01e      	b.n	8001616 <HAL_ADC_ConfigChannel+0x25e>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2101      	movs	r1, #1
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff face 	bl	8000b80 <LL_ADC_GetOffsetChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80015ee:	fa93 f3a3 	rbit	r3, r3
 80015f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80015f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80015fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80015fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001606:	2320      	movs	r3, #32
 8001608:	e004      	b.n	8001614 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800160a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800160e:	fab3 f383 	clz	r3, r3
 8001612:	b2db      	uxtb	r3, r3
 8001614:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800161e:	2b00      	cmp	r3, #0
 8001620:	d105      	bne.n	800162e <HAL_ADC_ConfigChannel+0x276>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	0e9b      	lsrs	r3, r3, #26
 8001628:	f003 031f 	and.w	r3, r3, #31
 800162c:	e018      	b.n	8001660 <HAL_ADC_ConfigChannel+0x2a8>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001636:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800163a:	fa93 f3a3 	rbit	r3, r3
 800163e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001642:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001646:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800164a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001652:	2320      	movs	r3, #32
 8001654:	e004      	b.n	8001660 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001656:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800165a:	fab3 f383 	clz	r3, r3
 800165e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001660:	429a      	cmp	r2, r3
 8001662:	d106      	bne.n	8001672 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2200      	movs	r2, #0
 800166a:	2101      	movs	r1, #1
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fa9d 	bl	8000bac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2102      	movs	r1, #2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fa81 	bl	8000b80 <LL_ADC_GetOffsetChannel>
 800167e:	4603      	mov	r3, r0
 8001680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10a      	bne.n	800169e <HAL_ADC_ConfigChannel+0x2e6>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2102      	movs	r1, #2
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fa76 	bl	8000b80 <LL_ADC_GetOffsetChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	0e9b      	lsrs	r3, r3, #26
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	e01e      	b.n	80016dc <HAL_ADC_ConfigChannel+0x324>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2102      	movs	r1, #2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fa6b 	bl	8000b80 <LL_ADC_GetOffsetChannel>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80016b4:	fa93 f3a3 	rbit	r3, r3
 80016b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80016bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80016c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80016c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80016cc:	2320      	movs	r3, #32
 80016ce:	e004      	b.n	80016da <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80016d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80016d4:	fab3 f383 	clz	r3, r3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d105      	bne.n	80016f4 <HAL_ADC_ConfigChannel+0x33c>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0e9b      	lsrs	r3, r3, #26
 80016ee:	f003 031f 	and.w	r3, r3, #31
 80016f2:	e016      	b.n	8001722 <HAL_ADC_ConfigChannel+0x36a>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001700:	fa93 f3a3 	rbit	r3, r3
 8001704:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001706:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001708:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800170c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001714:	2320      	movs	r3, #32
 8001716:	e004      	b.n	8001722 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001718:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800171c:	fab3 f383 	clz	r3, r3
 8001720:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001722:	429a      	cmp	r2, r3
 8001724:	d106      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2200      	movs	r2, #0
 800172c:	2102      	movs	r1, #2
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fa3c 	bl	8000bac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2103      	movs	r1, #3
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fa20 	bl	8000b80 <LL_ADC_GetOffsetChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10a      	bne.n	8001760 <HAL_ADC_ConfigChannel+0x3a8>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2103      	movs	r1, #3
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fa15 	bl	8000b80 <LL_ADC_GetOffsetChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	0e9b      	lsrs	r3, r3, #26
 800175a:	f003 021f 	and.w	r2, r3, #31
 800175e:	e017      	b.n	8001790 <HAL_ADC_ConfigChannel+0x3d8>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2103      	movs	r1, #3
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fa0a 	bl	8000b80 <LL_ADC_GetOffsetChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001770:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001772:	fa93 f3a3 	rbit	r3, r3
 8001776:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001778:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800177a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800177c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001782:	2320      	movs	r3, #32
 8001784:	e003      	b.n	800178e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001786:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001788:	fab3 f383 	clz	r3, r3
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001798:	2b00      	cmp	r3, #0
 800179a:	d105      	bne.n	80017a8 <HAL_ADC_ConfigChannel+0x3f0>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	0e9b      	lsrs	r3, r3, #26
 80017a2:	f003 031f 	and.w	r3, r3, #31
 80017a6:	e011      	b.n	80017cc <HAL_ADC_ConfigChannel+0x414>
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017b0:	fa93 f3a3 	rbit	r3, r3
 80017b4:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80017b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80017b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80017ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80017c0:	2320      	movs	r3, #32
 80017c2:	e003      	b.n	80017cc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80017c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d106      	bne.n	80017de <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2200      	movs	r2, #0
 80017d6:	2103      	movs	r1, #3
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff f9e7 	bl	8000bac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fb48 	bl	8000e78 <LL_ADC_IsEnabled>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f040 8140 	bne.w	8001a70 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6818      	ldr	r0, [r3, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	6819      	ldr	r1, [r3, #0]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	461a      	mov	r2, r3
 80017fe:	f7ff faa3 	bl	8000d48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	4a8f      	ldr	r2, [pc, #572]	@ (8001a44 <HAL_ADC_ConfigChannel+0x68c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	f040 8131 	bne.w	8001a70 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10b      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x47e>
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	0e9b      	lsrs	r3, r3, #26
 8001824:	3301      	adds	r3, #1
 8001826:	f003 031f 	and.w	r3, r3, #31
 800182a:	2b09      	cmp	r3, #9
 800182c:	bf94      	ite	ls
 800182e:	2301      	movls	r3, #1
 8001830:	2300      	movhi	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	e019      	b.n	800186a <HAL_ADC_ConfigChannel+0x4b2>
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001844:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001846:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001848:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800184e:	2320      	movs	r3, #32
 8001850:	e003      	b.n	800185a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001854:	fab3 f383 	clz	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	3301      	adds	r3, #1
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	2b09      	cmp	r3, #9
 8001862:	bf94      	ite	ls
 8001864:	2301      	movls	r3, #1
 8001866:	2300      	movhi	r3, #0
 8001868:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800186a:	2b00      	cmp	r3, #0
 800186c:	d079      	beq.n	8001962 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001876:	2b00      	cmp	r3, #0
 8001878:	d107      	bne.n	800188a <HAL_ADC_ConfigChannel+0x4d2>
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	0e9b      	lsrs	r3, r3, #26
 8001880:	3301      	adds	r3, #1
 8001882:	069b      	lsls	r3, r3, #26
 8001884:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001888:	e015      	b.n	80018b6 <HAL_ADC_ConfigChannel+0x4fe>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800189a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800189c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80018a2:	2320      	movs	r3, #32
 80018a4:	e003      	b.n	80018ae <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80018a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	3301      	adds	r3, #1
 80018b0:	069b      	lsls	r3, r3, #26
 80018b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x51e>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	0e9b      	lsrs	r3, r3, #26
 80018c8:	3301      	adds	r3, #1
 80018ca:	f003 031f 	and.w	r3, r3, #31
 80018ce:	2101      	movs	r1, #1
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	e017      	b.n	8001906 <HAL_ADC_ConfigChannel+0x54e>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80018e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80018e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80018e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80018ee:	2320      	movs	r3, #32
 80018f0:	e003      	b.n	80018fa <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80018f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	3301      	adds	r3, #1
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	2101      	movs	r1, #1
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	ea42 0103 	orr.w	r1, r2, r3
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10a      	bne.n	800192c <HAL_ADC_ConfigChannel+0x574>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	0e9b      	lsrs	r3, r3, #26
 800191c:	3301      	adds	r3, #1
 800191e:	f003 021f 	and.w	r2, r3, #31
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	051b      	lsls	r3, r3, #20
 800192a:	e018      	b.n	800195e <HAL_ADC_ConfigChannel+0x5a6>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001934:	fa93 f3a3 	rbit	r3, r3
 8001938:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800193a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800193c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800193e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8001944:	2320      	movs	r3, #32
 8001946:	e003      	b.n	8001950 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8001948:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800194a:	fab3 f383 	clz	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	3301      	adds	r3, #1
 8001952:	f003 021f 	and.w	r2, r3, #31
 8001956:	4613      	mov	r3, r2
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	4413      	add	r3, r2
 800195c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800195e:	430b      	orrs	r3, r1
 8001960:	e081      	b.n	8001a66 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196a:	2b00      	cmp	r3, #0
 800196c:	d107      	bne.n	800197e <HAL_ADC_ConfigChannel+0x5c6>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	0e9b      	lsrs	r3, r3, #26
 8001974:	3301      	adds	r3, #1
 8001976:	069b      	lsls	r3, r3, #26
 8001978:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800197c:	e015      	b.n	80019aa <HAL_ADC_ConfigChannel+0x5f2>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001986:	fa93 f3a3 	rbit	r3, r3
 800198a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800198c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800198e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001992:	2b00      	cmp	r3, #0
 8001994:	d101      	bne.n	800199a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8001996:	2320      	movs	r3, #32
 8001998:	e003      	b.n	80019a2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800199a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800199c:	fab3 f383 	clz	r3, r3
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	3301      	adds	r3, #1
 80019a4:	069b      	lsls	r3, r3, #26
 80019a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <HAL_ADC_ConfigChannel+0x612>
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	0e9b      	lsrs	r3, r3, #26
 80019bc:	3301      	adds	r3, #1
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	2101      	movs	r1, #1
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	e017      	b.n	80019fa <HAL_ADC_ConfigChannel+0x642>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	fa93 f3a3 	rbit	r3, r3
 80019d6:	61fb      	str	r3, [r7, #28]
  return result;
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80019dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80019e2:	2320      	movs	r3, #32
 80019e4:	e003      	b.n	80019ee <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80019e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e8:	fab3 f383 	clz	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	3301      	adds	r3, #1
 80019f0:	f003 031f 	and.w	r3, r3, #31
 80019f4:	2101      	movs	r1, #1
 80019f6:	fa01 f303 	lsl.w	r3, r1, r3
 80019fa:	ea42 0103 	orr.w	r1, r2, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d10d      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x66e>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	0e9b      	lsrs	r3, r3, #26
 8001a10:	3301      	adds	r3, #1
 8001a12:	f003 021f 	and.w	r2, r3, #31
 8001a16:	4613      	mov	r3, r2
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3b1e      	subs	r3, #30
 8001a1e:	051b      	lsls	r3, r3, #20
 8001a20:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a24:	e01e      	b.n	8001a64 <HAL_ADC_ConfigChannel+0x6ac>
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	613b      	str	r3, [r7, #16]
  return result;
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d104      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8001a3e:	2320      	movs	r3, #32
 8001a40:	e006      	b.n	8001a50 <HAL_ADC_ConfigChannel+0x698>
 8001a42:	bf00      	nop
 8001a44:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	fab3 f383 	clz	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	3301      	adds	r3, #1
 8001a52:	f003 021f 	and.w	r2, r3, #31
 8001a56:	4613      	mov	r3, r2
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3b1e      	subs	r3, #30
 8001a5e:	051b      	lsls	r3, r3, #20
 8001a60:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a64:	430b      	orrs	r3, r1
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	6892      	ldr	r2, [r2, #8]
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f7ff f941 	bl	8000cf2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b3f      	ldr	r3, [pc, #252]	@ (8001b74 <HAL_ADC_ConfigChannel+0x7bc>)
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d071      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a7c:	483e      	ldr	r0, [pc, #248]	@ (8001b78 <HAL_ADC_ConfigChannel+0x7c0>)
 8001a7e:	f7ff f84d 	bl	8000b1c <LL_ADC_GetCommonPathInternalCh>
 8001a82:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a3c      	ldr	r2, [pc, #240]	@ (8001b7c <HAL_ADC_ConfigChannel+0x7c4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d004      	beq.n	8001a9a <HAL_ADC_ConfigChannel+0x6e2>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a3a      	ldr	r2, [pc, #232]	@ (8001b80 <HAL_ADC_ConfigChannel+0x7c8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d127      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001a9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001a9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d121      	bne.n	8001aea <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001aae:	d157      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ab0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ab4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ab8:	4619      	mov	r1, r3
 8001aba:	482f      	ldr	r0, [pc, #188]	@ (8001b78 <HAL_ADC_ConfigChannel+0x7c0>)
 8001abc:	f7ff f81b 	bl	8000af6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ac0:	4b30      	ldr	r3, [pc, #192]	@ (8001b84 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	099b      	lsrs	r3, r3, #6
 8001ac6:	4a30      	ldr	r2, [pc, #192]	@ (8001b88 <HAL_ADC_ConfigChannel+0x7d0>)
 8001ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8001acc:	099b      	lsrs	r3, r3, #6
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4413      	add	r3, r2
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ada:	e002      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1f9      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ae8:	e03a      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a27      	ldr	r2, [pc, #156]	@ (8001b8c <HAL_ADC_ConfigChannel+0x7d4>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d113      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x764>
 8001af4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001af8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10d      	bne.n	8001b1c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a22      	ldr	r2, [pc, #136]	@ (8001b90 <HAL_ADC_ConfigChannel+0x7d8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d02a      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b12:	4619      	mov	r1, r3
 8001b14:	4818      	ldr	r0, [pc, #96]	@ (8001b78 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b16:	f7fe ffee 	bl	8000af6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001b1a:	e021      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1c      	ldr	r2, [pc, #112]	@ (8001b94 <HAL_ADC_ConfigChannel+0x7dc>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d11c      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001b26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d116      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a16      	ldr	r2, [pc, #88]	@ (8001b90 <HAL_ADC_ConfigChannel+0x7d8>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d011      	beq.n	8001b60 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001b40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b44:	4619      	mov	r1, r3
 8001b46:	480c      	ldr	r0, [pc, #48]	@ (8001b78 <HAL_ADC_ConfigChannel+0x7c0>)
 8001b48:	f7fe ffd5 	bl	8000af6 <LL_ADC_SetCommonPathInternalCh>
 8001b4c:	e008      	b.n	8001b60 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b52:	f043 0220 	orr.w	r2, r3, #32
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001b68:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	37d8      	adds	r7, #216	@ 0xd8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	80080000 	.word	0x80080000
 8001b78:	50000300 	.word	0x50000300
 8001b7c:	c3210000 	.word	0xc3210000
 8001b80:	90c00010 	.word	0x90c00010
 8001b84:	20000000 	.word	0x20000000
 8001b88:	053e2d63 	.word	0x053e2d63
 8001b8c:	c7520000 	.word	0xc7520000
 8001b90:	50000100 	.word	0x50000100
 8001b94:	cb840000 	.word	0xcb840000

08001b98 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff f967 	bl	8000e78 <LL_ADC_IsEnabled>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d14d      	bne.n	8001c4c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <ADC_Enable+0xc0>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00d      	beq.n	8001bda <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc2:	f043 0210 	orr.w	r2, r3, #16
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bce:	f043 0201 	orr.w	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e039      	b.n	8001c4e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff f936 	bl	8000e50 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001be4:	f7fe ff46 	bl	8000a74 <HAL_GetTick>
 8001be8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001bea:	e028      	b.n	8001c3e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff f941 	bl	8000e78 <LL_ADC_IsEnabled>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d104      	bne.n	8001c06 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff f925 	bl	8000e50 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c06:	f7fe ff35 	bl	8000a74 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d914      	bls.n	8001c3e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d00d      	beq.n	8001c3e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c26:	f043 0210 	orr.w	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c32:	f043 0201 	orr.w	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e007      	b.n	8001c4e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d1cf      	bne.n	8001bec <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	8000003f 	.word	0x8000003f

08001c5c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c68:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d14b      	bne.n	8001d0e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c7a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d021      	beq.n	8001cd4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe ffed 	bl	8000c74 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d032      	beq.n	8001d06 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d12b      	bne.n	8001d06 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d11f      	bne.n	8001d06 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cca:	f043 0201 	orr.w	r2, r3, #1
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cd2:	e018      	b.n	8001d06 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d111      	bne.n	8001d06 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cf2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f7fe fcc0 	bl	800068c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001d0c:	e00e      	b.n	8001d2c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f7ff fb42 	bl	80013a4 <HAL_ADC_ErrorCallback>
}
 8001d20:	e004      	b.n	8001d2c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	4798      	blx	r3
}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d40:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001d42:	68f8      	ldr	r0, [r7, #12]
 8001d44:	f7ff fb24 	bl	8001390 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d48:	bf00      	nop
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d62:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d6e:	f043 0204 	orr.w	r2, r3, #4
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f7ff fb14 	bl	80013a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d7c:	bf00      	nop
 8001d7e:	3710      	adds	r7, #16
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <LL_ADC_IsEnabled>:
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <LL_ADC_IsEnabled+0x18>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <LL_ADC_IsEnabled+0x1a>
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <LL_ADC_REG_IsConversionOngoing>:
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 0304 	and.w	r3, r3, #4
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d101      	bne.n	8001dc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b0a1      	sub	sp, #132	@ 0x84
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e08b      	b.n	8001f06 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8001df6:	2300      	movs	r3, #0
 8001df8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e06:	d102      	bne.n	8001e0e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001e08:	4b41      	ldr	r3, [pc, #260]	@ (8001f10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	e001      	b.n	8001e12 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10b      	bne.n	8001e30 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e1c:	f043 0220 	orr.w	r2, r3, #32
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e06a      	b.n	8001f06 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff ffb9 	bl	8001daa <LL_ADC_REG_IsConversionOngoing>
 8001e38:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff ffb3 	bl	8001daa <LL_ADC_REG_IsConversionOngoing>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d14c      	bne.n	8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8001e4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d149      	bne.n	8001ee4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8001e50:	4b30      	ldr	r3, [pc, #192]	@ (8001f14 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8001e52:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d028      	beq.n	8001eae <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8001e5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	6859      	ldr	r1, [r3, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e6e:	035b      	lsls	r3, r3, #13
 8001e70:	430b      	orrs	r3, r1
 8001e72:	431a      	orrs	r2, r3
 8001e74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e76:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e78:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001e7c:	f7ff ff82 	bl	8001d84 <LL_ADC_IsEnabled>
 8001e80:	4604      	mov	r4, r0
 8001e82:	4823      	ldr	r0, [pc, #140]	@ (8001f10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001e84:	f7ff ff7e 	bl	8001d84 <LL_ADC_IsEnabled>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4323      	orrs	r3, r4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d133      	bne.n	8001ef8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8001e90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001e98:	f023 030f 	bic.w	r3, r3, #15
 8001e9c:	683a      	ldr	r2, [r7, #0]
 8001e9e:	6811      	ldr	r1, [r2, #0]
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	6892      	ldr	r2, [r2, #8]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001eaa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001eac:	e024      	b.n	8001ef8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001eae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001eb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001eb8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eba:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001ebe:	f7ff ff61 	bl	8001d84 <LL_ADC_IsEnabled>
 8001ec2:	4604      	mov	r4, r0
 8001ec4:	4812      	ldr	r0, [pc, #72]	@ (8001f10 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001ec6:	f7ff ff5d 	bl	8001d84 <LL_ADC_IsEnabled>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	4323      	orrs	r3, r4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d112      	bne.n	8001ef8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8001ed2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001eda:	f023 030f 	bic.w	r3, r3, #15
 8001ede:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001ee0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ee2:	e009      	b.n	8001ef8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ee8:	f043 0220 	orr.w	r2, r3, #32
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001ef6:	e000      	b.n	8001efa <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ef8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001f02:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3784      	adds	r7, #132	@ 0x84
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd90      	pop	{r4, r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	50000100 	.word	0x50000100
 8001f14:	50000300 	.word	0x50000300

08001f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f28:	4b0c      	ldr	r3, [pc, #48]	@ (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2e:	68ba      	ldr	r2, [r7, #8]
 8001f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f34:	4013      	ands	r3, r2
 8001f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f4a:	4a04      	ldr	r2, [pc, #16]	@ (8001f5c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	60d3      	str	r3, [r2, #12]
}
 8001f50:	bf00      	nop
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f64:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <__NVIC_GetPriorityGrouping+0x18>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	0a1b      	lsrs	r3, r3, #8
 8001f6a:	f003 0307 	and.w	r3, r3, #7
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	e000ed00 	.word	0xe000ed00

08001f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	db0b      	blt.n	8001fa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	f003 021f 	and.w	r2, r3, #31
 8001f94:	4907      	ldr	r1, [pc, #28]	@ (8001fb4 <__NVIC_EnableIRQ+0x38>)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	e000e100 	.word	0xe000e100

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	db0a      	blt.n	8001fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	490c      	ldr	r1, [pc, #48]	@ (8002004 <__NVIC_SetPriority+0x4c>)
 8001fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd6:	0112      	lsls	r2, r2, #4
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	440b      	add	r3, r1
 8001fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe0:	e00a      	b.n	8001ff8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	4908      	ldr	r1, [pc, #32]	@ (8002008 <__NVIC_SetPriority+0x50>)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	3b04      	subs	r3, #4
 8001ff0:	0112      	lsls	r2, r2, #4
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	761a      	strb	r2, [r3, #24]
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	@ 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f1c3 0307 	rsb	r3, r3, #7
 8002026:	2b04      	cmp	r3, #4
 8002028:	bf28      	it	cs
 800202a:	2304      	movcs	r3, #4
 800202c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3304      	adds	r3, #4
 8002032:	2b06      	cmp	r3, #6
 8002034:	d902      	bls.n	800203c <NVIC_EncodePriority+0x30>
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3b03      	subs	r3, #3
 800203a:	e000      	b.n	800203e <NVIC_EncodePriority+0x32>
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43da      	mvns	r2, r3
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	401a      	ands	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002054:	f04f 31ff 	mov.w	r1, #4294967295
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa01 f303 	lsl.w	r3, r1, r3
 800205e:	43d9      	mvns	r1, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	4313      	orrs	r3, r2
         );
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	@ 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
	...

08002074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002084:	d301      	bcc.n	800208a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002086:	2301      	movs	r3, #1
 8002088:	e00f      	b.n	80020aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800208a:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <SysTick_Config+0x40>)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	3b01      	subs	r3, #1
 8002090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002092:	210f      	movs	r1, #15
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f7ff ff8e 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800209c:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <SysTick_Config+0x40>)
 800209e:	2200      	movs	r2, #0
 80020a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020a2:	4b04      	ldr	r3, [pc, #16]	@ (80020b4 <SysTick_Config+0x40>)
 80020a4:	2207      	movs	r2, #7
 80020a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	e000e010 	.word	0xe000e010

080020b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff29 	bl	8001f18 <__NVIC_SetPriorityGrouping>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
 80020da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020dc:	f7ff ff40 	bl	8001f60 <__NVIC_GetPriorityGrouping>
 80020e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	68b9      	ldr	r1, [r7, #8]
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7ff ff90 	bl	800200c <NVIC_EncodePriority>
 80020ec:	4602      	mov	r2, r0
 80020ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff ff5f 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fa:	bf00      	nop
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b082      	sub	sp, #8
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff ff33 	bl	8001f7c <__NVIC_EnableIRQ>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ffa4 	bl	8002074 <SysTick_Config>
 800212c:	4603      	mov	r3, r0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e014      	b.n	8002172 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	791b      	ldrb	r3, [r3, #4]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d105      	bne.n	800215e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7fe fb53 	bl	8000804 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2202      	movs	r2, #2
 8002162:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
 8002182:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	795b      	ldrb	r3, [r3, #5]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d101      	bne.n	8002190 <HAL_DAC_Start+0x16>
 800218c:	2302      	movs	r3, #2
 800218e:	e043      	b.n	8002218 <HAL_DAC_Start+0x9e>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2202      	movs	r2, #2
 800219a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6819      	ldr	r1, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	f003 0310 	and.w	r3, r3, #16
 80021a8:	2201      	movs	r2, #1
 80021aa:	409a      	lsls	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80021b4:	2001      	movs	r0, #1
 80021b6:	f7fe fc69 	bl	8000a8c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10f      	bne.n	80021e0 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d11d      	bne.n	800220a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0201 	orr.w	r2, r2, #1
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	e014      	b.n	800220a <HAL_DAC_Start+0x90>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2102      	movs	r1, #2
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d107      	bne.n	800220a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f042 0202 	orr.w	r2, r2, #2
 8002208:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
 800222c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d105      	bne.n	8002250 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	3308      	adds	r3, #8
 800224c:	617b      	str	r3, [r7, #20]
 800224e:	e004      	b.n	800225a <HAL_DAC_SetValue+0x3a>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	3314      	adds	r3, #20
 8002258:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	461a      	mov	r2, r3
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	@ 0x28
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	795b      	ldrb	r3, [r3, #5]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_DAC_ConfigChannel+0x18>
 8002284:	2302      	movs	r3, #2
 8002286:	e192      	b.n	80025ae <HAL_DAC_ConfigChannel+0x33e>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2201      	movs	r2, #1
 800228c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2202      	movs	r2, #2
 8002292:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b04      	cmp	r3, #4
 800229a:	d174      	bne.n	8002386 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800229c:	f7fe fbea 	bl	8000a74 <HAL_GetTick>
 80022a0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d134      	bne.n	8002312 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022a8:	e011      	b.n	80022ce <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022aa:	f7fe fbe3 	bl	8000a74 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d90a      	bls.n	80022ce <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	f043 0208 	orr.w	r2, r3, #8
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2203      	movs	r2, #3
 80022c8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e16f      	b.n	80025ae <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e6      	bne.n	80022aa <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 80022dc:	2001      	movs	r0, #1
 80022de:	f7fe fbd5 	bl	8000a8c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80022ec:	e01e      	b.n	800232c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80022ee:	f7fe fbc1 	bl	8000a74 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d90a      	bls.n	8002312 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	f043 0208 	orr.w	r2, r3, #8
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2203      	movs	r2, #3
 800230c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e14d      	b.n	80025ae <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002318:	2b00      	cmp	r3, #0
 800231a:	dbe8      	blt.n	80022ee <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800231c:	2001      	movs	r0, #1
 800231e:	f7fe fbb5 	bl	8000a8c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800232a:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	ea02 0103 	and.w	r1, r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f003 0310 	and.w	r3, r3, #16
 8002350:	409a      	lsls	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	21ff      	movs	r1, #255	@ 0xff
 8002368:	fa01 f303 	lsl.w	r3, r1, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	ea02 0103 	and.w	r1, r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	409a      	lsls	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d11d      	bne.n	80023ca <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	221f      	movs	r2, #31
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023a6:	4013      	ands	r3, r2
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0310 	and.w	r3, r3, #16
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023be:	4313      	orrs	r3, r2
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2207      	movs	r2, #7
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43db      	mvns	r3, r3
 80023e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023e2:	4013      	ands	r3, r2
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d102      	bne.n	80023f4 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	623b      	str	r3, [r7, #32]
 80023f2:	e00f      	b.n	8002414 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d102      	bne.n	8002402 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80023fc:	2301      	movs	r3, #1
 80023fe:	623b      	str	r3, [r7, #32]
 8002400:	e008      	b.n	8002414 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d102      	bne.n	8002410 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800240a:	2301      	movs	r3, #1
 800240c:	623b      	str	r3, [r7, #32]
 800240e:	e001      	b.n	8002414 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002410:	2300      	movs	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	4313      	orrs	r3, r2
 800241e:	6a3a      	ldr	r2, [r7, #32]
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f003 0310 	and.w	r3, r3, #16
 800242a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002436:	4013      	ands	r3, r2
 8002438:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	791b      	ldrb	r3, [r3, #4]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d102      	bne.n	8002448 <HAL_DAC_ConfigChannel+0x1d8>
 8002442:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002446:	e000      	b.n	800244a <HAL_DAC_ConfigChannel+0x1da>
 8002448:	2300      	movs	r3, #0
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002462:	4013      	ands	r3, r2
 8002464:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	795b      	ldrb	r3, [r3, #5]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d102      	bne.n	8002474 <HAL_DAC_ConfigChannel+0x204>
 800246e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002472:	e000      	b.n	8002476 <HAL_DAC_ConfigChannel+0x206>
 8002474:	2300      	movs	r3, #0
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b02      	cmp	r3, #2
 800248a:	d114      	bne.n	80024b6 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800248c:	f001 fa68 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 8002490:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	4a48      	ldr	r2, [pc, #288]	@ (80025b8 <HAL_DAC_ConfigChannel+0x348>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d904      	bls.n	80024a4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800249a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a2:	e00f      	b.n	80024c4 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	4a45      	ldr	r2, [pc, #276]	@ (80025bc <HAL_DAC_ConfigChannel+0x34c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d90a      	bls.n	80024c2 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80024ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024b4:	e006      	b.n	80024c4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024bc:	4313      	orrs	r3, r2
 80024be:	627b      	str	r3, [r7, #36]	@ 0x24
 80024c0:	e000      	b.n	80024c4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80024c2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024d2:	4313      	orrs	r3, r2
 80024d4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6819      	ldr	r1, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43da      	mvns	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	400a      	ands	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002516:	4013      	ands	r3, r2
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0310 	and.w	r3, r3, #16
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800252e:	4313      	orrs	r3, r2
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002538:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	22c0      	movs	r2, #192	@ 0xc0
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43da      	mvns	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	400a      	ands	r2, r1
 8002554:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	68db      	ldr	r3, [r3, #12]
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f003 0310 	and.w	r3, r3, #16
 8002580:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	ea02 0103 	and.w	r1, r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f003 0310 	and.w	r3, r3, #16
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	409a      	lsls	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2201      	movs	r2, #1
 80025a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3728      	adds	r7, #40	@ 0x28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	09896800 	.word	0x09896800
 80025bc:	04c4b400 	.word	0x04c4b400

080025c0 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	795b      	ldrb	r3, [r3, #5]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_DACEx_TriangleWaveGenerate+0x18>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e024      	b.n	8002622 <HAL_DACEx_TriangleWaveGenerate+0x62>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2201      	movs	r2, #1
 80025dc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2202      	movs	r2, #2
 80025e2:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL),
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	f44f 617c 	mov.w	r1, #4032	@ 0xfc0
 80025f4:	fa01 f303 	lsl.w	r3, r1, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	ea02 0103 	and.w	r1, r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f003 0310 	and.w	r3, r3, #16
 800260a:	409a      	lsls	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	430a      	orrs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]
             (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2201      	movs	r2, #1
 8002618:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e08d      	b.n	800275e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	4b47      	ldr	r3, [pc, #284]	@ (8002768 <HAL_DMA_Init+0x138>)
 800264a:	429a      	cmp	r2, r3
 800264c:	d80f      	bhi.n	800266e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	4b45      	ldr	r3, [pc, #276]	@ (800276c <HAL_DMA_Init+0x13c>)
 8002656:	4413      	add	r3, r2
 8002658:	4a45      	ldr	r2, [pc, #276]	@ (8002770 <HAL_DMA_Init+0x140>)
 800265a:	fba2 2303 	umull	r2, r3, r2, r3
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	009a      	lsls	r2, r3, #2
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a42      	ldr	r2, [pc, #264]	@ (8002774 <HAL_DMA_Init+0x144>)
 800266a:	641a      	str	r2, [r3, #64]	@ 0x40
 800266c:	e00e      	b.n	800268c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	4b40      	ldr	r3, [pc, #256]	@ (8002778 <HAL_DMA_Init+0x148>)
 8002676:	4413      	add	r3, r2
 8002678:	4a3d      	ldr	r2, [pc, #244]	@ (8002770 <HAL_DMA_Init+0x140>)
 800267a:	fba2 2303 	umull	r2, r3, r2, r3
 800267e:	091b      	lsrs	r3, r3, #4
 8002680:	009a      	lsls	r2, r3, #2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a3c      	ldr	r2, [pc, #240]	@ (800277c <HAL_DMA_Init+0x14c>)
 800268a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80026a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80026b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f9b6 	bl	8002a50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026ec:	d102      	bne.n	80026f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002708:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d010      	beq.n	8002734 <HAL_DMA_Init+0x104>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b04      	cmp	r3, #4
 8002718:	d80c      	bhi.n	8002734 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f9d6 	bl	8002acc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	e008      	b.n	8002746 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40020407 	.word	0x40020407
 800276c:	bffdfff8 	.word	0xbffdfff8
 8002770:	cccccccd 	.word	0xcccccccd
 8002774:	40020000 	.word	0x40020000
 8002778:	bffdfbf8 	.word	0xbffdfbf8
 800277c:	40020400 	.word	0x40020400

08002780 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	60f8      	str	r0, [r7, #12]
 8002788:	60b9      	str	r1, [r7, #8]
 800278a:	607a      	str	r2, [r7, #4]
 800278c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800278e:	2300      	movs	r3, #0
 8002790:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002798:	2b01      	cmp	r3, #1
 800279a:	d101      	bne.n	80027a0 <HAL_DMA_Start_IT+0x20>
 800279c:	2302      	movs	r3, #2
 800279e:	e066      	b.n	800286e <HAL_DMA_Start_IT+0xee>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d155      	bne.n	8002860 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0201 	bic.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f8fb 	bl	80029d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 020e 	orr.w	r2, r2, #14
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	e00f      	b.n	8002818 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0204 	bic.w	r2, r2, #4
 8002806:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 020a 	orr.w	r2, r2, #10
 8002816:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d007      	beq.n	8002836 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002830:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002834:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800283a:	2b00      	cmp	r3, #0
 800283c:	d007      	beq.n	800284e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002848:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800284c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0201 	orr.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	e005      	b.n	800286c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002868:	2302      	movs	r3, #2
 800286a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800286c:	7dfb      	ldrb	r3, [r7, #23]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2204      	movs	r2, #4
 8002898:	409a      	lsls	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d026      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x7a>
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d021      	beq.n	80028f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d107      	bne.n	80028ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 0204 	bic.w	r2, r2, #4
 80028c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	f003 021f 	and.w	r2, r3, #31
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	2104      	movs	r1, #4
 80028d8:	fa01 f202 	lsl.w	r2, r1, r2
 80028dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d071      	beq.n	80029ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80028ee:	e06c      	b.n	80029ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028f4:	f003 031f 	and.w	r3, r3, #31
 80028f8:	2202      	movs	r2, #2
 80028fa:	409a      	lsls	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4013      	ands	r3, r2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d02e      	beq.n	8002962 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d029      	beq.n	8002962 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10b      	bne.n	8002934 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 020a 	bic.w	r2, r2, #10
 800292a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002938:	f003 021f 	and.w	r2, r3, #31
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002940:	2102      	movs	r1, #2
 8002942:	fa01 f202 	lsl.w	r2, r1, r2
 8002946:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002954:	2b00      	cmp	r3, #0
 8002956:	d038      	beq.n	80029ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002960:	e033      	b.n	80029ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	f003 031f 	and.w	r3, r3, #31
 800296a:	2208      	movs	r2, #8
 800296c:	409a      	lsls	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4013      	ands	r3, r2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d02a      	beq.n	80029cc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f003 0308 	and.w	r3, r3, #8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d025      	beq.n	80029cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 020e 	bic.w	r2, r2, #14
 800298e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002994:	f003 021f 	and.w	r2, r3, #31
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	2101      	movs	r1, #1
 800299e:	fa01 f202 	lsl.w	r2, r1, r2
 80029a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80029ca:	bf00      	nop
 80029cc:	bf00      	nop
}
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80029ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d004      	beq.n	80029fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029fc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	f003 021f 	and.w	r2, r3, #31
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b10      	cmp	r3, #16
 8002a20:	d108      	bne.n	8002a34 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a32:	e007      	b.n	8002a44 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	60da      	str	r2, [r3, #12]
}
 8002a44:	bf00      	nop
 8002a46:	3714      	adds	r7, #20
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b16      	ldr	r3, [pc, #88]	@ (8002ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d802      	bhi.n	8002a6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002a64:	4b15      	ldr	r3, [pc, #84]	@ (8002abc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	e001      	b.n	8002a6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8002a6a:	4b15      	ldr	r3, [pc, #84]	@ (8002ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002a6c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	3b08      	subs	r3, #8
 8002a7a:	4a12      	ldr	r2, [pc, #72]	@ (8002ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a88:	089b      	lsrs	r3, r3, #2
 8002a8a:	009a      	lsls	r2, r3, #2
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	461a      	mov	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a0b      	ldr	r2, [pc, #44]	@ (8002ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002a9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	409a      	lsls	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002aaa:	bf00      	nop
 8002aac:	371c      	adds	r7, #28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40020407 	.word	0x40020407
 8002abc:	40020800 	.word	0x40020800
 8002ac0:	40020820 	.word	0x40020820
 8002ac4:	cccccccd 	.word	0xcccccccd
 8002ac8:	40020880 	.word	0x40020880

08002acc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	4b0b      	ldr	r3, [pc, #44]	@ (8002b0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a08      	ldr	r2, [pc, #32]	@ (8002b10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002aee:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	2201      	movs	r2, #1
 8002afa:	409a      	lsls	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	1000823f 	.word	0x1000823f
 8002b10:	40020940 	.word	0x40020940

08002b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b22:	e15a      	b.n	8002dda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	2101      	movs	r1, #1
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b30:	4013      	ands	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f000 814c 	beq.w	8002dd4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f003 0303 	and.w	r3, r3, #3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d005      	beq.n	8002b54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d130      	bne.n	8002bb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	2203      	movs	r2, #3
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	68da      	ldr	r2, [r3, #12]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	43db      	mvns	r3, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4013      	ands	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	091b      	lsrs	r3, r3, #4
 8002ba0:	f003 0201 	and.w	r2, r3, #1
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	693a      	ldr	r2, [r7, #16]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f003 0303 	and.w	r3, r3, #3
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d017      	beq.n	8002bf2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	2203      	movs	r2, #3
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	689a      	ldr	r2, [r3, #8]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0303 	and.w	r3, r3, #3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d123      	bne.n	8002c46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	08da      	lsrs	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3208      	adds	r2, #8
 8002c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	220f      	movs	r2, #15
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	693a      	ldr	r2, [r7, #16]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	08da      	lsrs	r2, r3, #3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3208      	adds	r2, #8
 8002c40:	6939      	ldr	r1, [r7, #16]
 8002c42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	2203      	movs	r2, #3
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 0203 	and.w	r2, r3, #3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 80a6 	beq.w	8002dd4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c88:	4b5b      	ldr	r3, [pc, #364]	@ (8002df8 <HAL_GPIO_Init+0x2e4>)
 8002c8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c8c:	4a5a      	ldr	r2, [pc, #360]	@ (8002df8 <HAL_GPIO_Init+0x2e4>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6613      	str	r3, [r2, #96]	@ 0x60
 8002c94:	4b58      	ldr	r3, [pc, #352]	@ (8002df8 <HAL_GPIO_Init+0x2e4>)
 8002c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ca0:	4a56      	ldr	r2, [pc, #344]	@ (8002dfc <HAL_GPIO_Init+0x2e8>)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	089b      	lsrs	r3, r3, #2
 8002ca6:	3302      	adds	r3, #2
 8002ca8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	220f      	movs	r2, #15
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002cca:	d01f      	beq.n	8002d0c <HAL_GPIO_Init+0x1f8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a4c      	ldr	r2, [pc, #304]	@ (8002e00 <HAL_GPIO_Init+0x2ec>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d019      	beq.n	8002d08 <HAL_GPIO_Init+0x1f4>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a4b      	ldr	r2, [pc, #300]	@ (8002e04 <HAL_GPIO_Init+0x2f0>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d013      	beq.n	8002d04 <HAL_GPIO_Init+0x1f0>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a4a      	ldr	r2, [pc, #296]	@ (8002e08 <HAL_GPIO_Init+0x2f4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00d      	beq.n	8002d00 <HAL_GPIO_Init+0x1ec>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a49      	ldr	r2, [pc, #292]	@ (8002e0c <HAL_GPIO_Init+0x2f8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d007      	beq.n	8002cfc <HAL_GPIO_Init+0x1e8>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a48      	ldr	r2, [pc, #288]	@ (8002e10 <HAL_GPIO_Init+0x2fc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d101      	bne.n	8002cf8 <HAL_GPIO_Init+0x1e4>
 8002cf4:	2305      	movs	r3, #5
 8002cf6:	e00a      	b.n	8002d0e <HAL_GPIO_Init+0x1fa>
 8002cf8:	2306      	movs	r3, #6
 8002cfa:	e008      	b.n	8002d0e <HAL_GPIO_Init+0x1fa>
 8002cfc:	2304      	movs	r3, #4
 8002cfe:	e006      	b.n	8002d0e <HAL_GPIO_Init+0x1fa>
 8002d00:	2303      	movs	r3, #3
 8002d02:	e004      	b.n	8002d0e <HAL_GPIO_Init+0x1fa>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e002      	b.n	8002d0e <HAL_GPIO_Init+0x1fa>
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <HAL_GPIO_Init+0x1fa>
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	f002 0203 	and.w	r2, r2, #3
 8002d14:	0092      	lsls	r2, r2, #2
 8002d16:	4093      	lsls	r3, r2
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d1e:	4937      	ldr	r1, [pc, #220]	@ (8002dfc <HAL_GPIO_Init+0x2e8>)
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	089b      	lsrs	r3, r3, #2
 8002d24:	3302      	adds	r3, #2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d2c:	4b39      	ldr	r3, [pc, #228]	@ (8002e14 <HAL_GPIO_Init+0x300>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d50:	4a30      	ldr	r2, [pc, #192]	@ (8002e14 <HAL_GPIO_Init+0x300>)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d56:	4b2f      	ldr	r3, [pc, #188]	@ (8002e14 <HAL_GPIO_Init+0x300>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d7a:	4a26      	ldr	r2, [pc, #152]	@ (8002e14 <HAL_GPIO_Init+0x300>)
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002d80:	4b24      	ldr	r3, [pc, #144]	@ (8002e14 <HAL_GPIO_Init+0x300>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002da4:	4a1b      	ldr	r2, [pc, #108]	@ (8002e14 <HAL_GPIO_Init+0x300>)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002daa:	4b1a      	ldr	r3, [pc, #104]	@ (8002e14 <HAL_GPIO_Init+0x300>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	4013      	ands	r3, r2
 8002db8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dce:	4a11      	ldr	r2, [pc, #68]	@ (8002e14 <HAL_GPIO_Init+0x300>)
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	fa22 f303 	lsr.w	r3, r2, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f47f ae9d 	bne.w	8002b24 <HAL_GPIO_Init+0x10>
  }
}
 8002dea:	bf00      	nop
 8002dec:	bf00      	nop
 8002dee:	371c      	adds	r7, #28
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	48000400 	.word	0x48000400
 8002e04:	48000800 	.word	0x48000800
 8002e08:	48000c00 	.word	0x48000c00
 8002e0c:	48001000 	.word	0x48001000
 8002e10:	48001400 	.word	0x48001400
 8002e14:	40010400 	.word	0x40010400

08002e18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	460b      	mov	r3, r1
 8002e22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	887b      	ldrh	r3, [r7, #2]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e30:	2301      	movs	r3, #1
 8002e32:	73fb      	strb	r3, [r7, #15]
 8002e34:	e001      	b.n	8002e3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	460b      	mov	r3, r1
 8002e52:	807b      	strh	r3, [r7, #2]
 8002e54:	4613      	mov	r3, r2
 8002e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e58:	787b      	ldrb	r3, [r7, #1]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e5e:	887a      	ldrh	r2, [r7, #2]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e64:	e002      	b.n	8002e6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e66:	887a      	ldrh	r2, [r7, #2]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	460b      	mov	r3, r1
 8002e82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e8a:	887a      	ldrh	r2, [r7, #2]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	041a      	lsls	r2, r3, #16
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	43d9      	mvns	r1, r3
 8002e96:	887b      	ldrh	r3, [r7, #2]
 8002e98:	400b      	ands	r3, r1
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	619a      	str	r2, [r3, #24]
}
 8002ea0:	bf00      	nop
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d141      	bne.n	8002f3e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eba:	4b4b      	ldr	r3, [pc, #300]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ec2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ec6:	d131      	bne.n	8002f2c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ec8:	4b47      	ldr	r3, [pc, #284]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ece:	4a46      	ldr	r2, [pc, #280]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ed4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ed8:	4b43      	ldr	r3, [pc, #268]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ee0:	4a41      	ldr	r2, [pc, #260]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ee6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ee8:	4b40      	ldr	r3, [pc, #256]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2232      	movs	r2, #50	@ 0x32
 8002eee:	fb02 f303 	mul.w	r3, r2, r3
 8002ef2:	4a3f      	ldr	r2, [pc, #252]	@ (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef8:	0c9b      	lsrs	r3, r3, #18
 8002efa:	3301      	adds	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002efe:	e002      	b.n	8002f06 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f06:	4b38      	ldr	r3, [pc, #224]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f12:	d102      	bne.n	8002f1a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1f2      	bne.n	8002f00 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f1a:	4b33      	ldr	r3, [pc, #204]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f26:	d158      	bne.n	8002fda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e057      	b.n	8002fdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f2c:	4b2e      	ldr	r3, [pc, #184]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f32:	4a2d      	ldr	r2, [pc, #180]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f3c:	e04d      	b.n	8002fda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f44:	d141      	bne.n	8002fca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f46:	4b28      	ldr	r3, [pc, #160]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f52:	d131      	bne.n	8002fb8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f54:	4b24      	ldr	r3, [pc, #144]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f5a:	4a23      	ldr	r2, [pc, #140]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f60:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f64:	4b20      	ldr	r3, [pc, #128]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f72:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f74:	4b1d      	ldr	r3, [pc, #116]	@ (8002fec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2232      	movs	r2, #50	@ 0x32
 8002f7a:	fb02 f303 	mul.w	r3, r2, r3
 8002f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	0c9b      	lsrs	r3, r3, #18
 8002f86:	3301      	adds	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f8a:	e002      	b.n	8002f92 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f92:	4b15      	ldr	r3, [pc, #84]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f9e:	d102      	bne.n	8002fa6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f2      	bne.n	8002f8c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fa6:	4b10      	ldr	r3, [pc, #64]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb2:	d112      	bne.n	8002fda <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e011      	b.n	8002fdc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fc4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002fc8:	e007      	b.n	8002fda <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002fca:	4b07      	ldr	r3, [pc, #28]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fd2:	4a05      	ldr	r2, [pc, #20]	@ (8002fe8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002fd8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	40007000 	.word	0x40007000
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	431bde83 	.word	0x431bde83

08002ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e306      	b.n	8003614 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d075      	beq.n	80030fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003012:	4b97      	ldr	r3, [pc, #604]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800301c:	4b94      	ldr	r3, [pc, #592]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b0c      	cmp	r3, #12
 800302a:	d102      	bne.n	8003032 <HAL_RCC_OscConfig+0x3e>
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2b03      	cmp	r3, #3
 8003030:	d002      	beq.n	8003038 <HAL_RCC_OscConfig+0x44>
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	2b08      	cmp	r3, #8
 8003036:	d10b      	bne.n	8003050 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003038:	4b8d      	ldr	r3, [pc, #564]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d05b      	beq.n	80030fc <HAL_RCC_OscConfig+0x108>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d157      	bne.n	80030fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e2e1      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003058:	d106      	bne.n	8003068 <HAL_RCC_OscConfig+0x74>
 800305a:	4b85      	ldr	r3, [pc, #532]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a84      	ldr	r2, [pc, #528]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 8003060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	e01d      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003070:	d10c      	bne.n	800308c <HAL_RCC_OscConfig+0x98>
 8003072:	4b7f      	ldr	r3, [pc, #508]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a7e      	ldr	r2, [pc, #504]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 8003078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	4b7c      	ldr	r3, [pc, #496]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a7b      	ldr	r2, [pc, #492]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 8003084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	e00b      	b.n	80030a4 <HAL_RCC_OscConfig+0xb0>
 800308c:	4b78      	ldr	r3, [pc, #480]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a77      	ldr	r2, [pc, #476]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 8003092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b75      	ldr	r3, [pc, #468]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a74      	ldr	r2, [pc, #464]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 800309e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d013      	beq.n	80030d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fd fce2 	bl	8000a74 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b4:	f7fd fcde 	bl	8000a74 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	@ 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e2a6      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d0f0      	beq.n	80030b4 <HAL_RCC_OscConfig+0xc0>
 80030d2:	e014      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d4:	f7fd fcce 	bl	8000a74 <HAL_GetTick>
 80030d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030da:	e008      	b.n	80030ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030dc:	f7fd fcca 	bl	8000a74 <HAL_GetTick>
 80030e0:	4602      	mov	r2, r0
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	1ad3      	subs	r3, r2, r3
 80030e6:	2b64      	cmp	r3, #100	@ 0x64
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e292      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ee:	4b60      	ldr	r3, [pc, #384]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1f0      	bne.n	80030dc <HAL_RCC_OscConfig+0xe8>
 80030fa:	e000      	b.n	80030fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b00      	cmp	r3, #0
 8003108:	d075      	beq.n	80031f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800310a:	4b59      	ldr	r3, [pc, #356]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
 8003112:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003114:	4b56      	ldr	r3, [pc, #344]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b0c      	cmp	r3, #12
 8003122:	d102      	bne.n	800312a <HAL_RCC_OscConfig+0x136>
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	2b02      	cmp	r3, #2
 8003128:	d002      	beq.n	8003130 <HAL_RCC_OscConfig+0x13c>
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b04      	cmp	r3, #4
 800312e:	d11f      	bne.n	8003170 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003130:	4b4f      	ldr	r3, [pc, #316]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <HAL_RCC_OscConfig+0x154>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e265      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003148:	4b49      	ldr	r3, [pc, #292]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	4946      	ldr	r1, [pc, #280]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 8003158:	4313      	orrs	r3, r2
 800315a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800315c:	4b45      	ldr	r3, [pc, #276]	@ (8003274 <HAL_RCC_OscConfig+0x280>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd fc3b 	bl	80009dc <HAL_InitTick>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d043      	beq.n	80031f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e251      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d023      	beq.n	80031c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003178:	4b3d      	ldr	r3, [pc, #244]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a3c      	ldr	r2, [pc, #240]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 800317e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fd fc76 	bl	8000a74 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800318c:	f7fd fc72 	bl	8000a74 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e23a      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800319e:	4b34      	ldr	r3, [pc, #208]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031aa:	4b31      	ldr	r3, [pc, #196]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	061b      	lsls	r3, r3, #24
 80031b8:	492d      	ldr	r1, [pc, #180]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	604b      	str	r3, [r1, #4]
 80031be:	e01a      	b.n	80031f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 80031c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031cc:	f7fd fc52 	bl	8000a74 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031d4:	f7fd fc4e 	bl	8000a74 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e216      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031e6:	4b22      	ldr	r3, [pc, #136]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x1e0>
 80031f2:	e000      	b.n	80031f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0308 	and.w	r3, r3, #8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d041      	beq.n	8003286 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01c      	beq.n	8003244 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800320a:	4b19      	ldr	r3, [pc, #100]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 800320c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003210:	4a17      	ldr	r2, [pc, #92]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321a:	f7fd fc2b 	bl	8000a74 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003222:	f7fd fc27 	bl	8000a74 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e1ef      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003234:	4b0e      	ldr	r3, [pc, #56]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 8003236:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0ef      	beq.n	8003222 <HAL_RCC_OscConfig+0x22e>
 8003242:	e020      	b.n	8003286 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003244:	4b0a      	ldr	r3, [pc, #40]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 8003246:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800324a:	4a09      	ldr	r2, [pc, #36]	@ (8003270 <HAL_RCC_OscConfig+0x27c>)
 800324c:	f023 0301 	bic.w	r3, r3, #1
 8003250:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fd fc0e 	bl	8000a74 <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800325a:	e00d      	b.n	8003278 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800325c:	f7fd fc0a 	bl	8000a74 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d906      	bls.n	8003278 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e1d2      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
 800326e:	bf00      	nop
 8003270:	40021000 	.word	0x40021000
 8003274:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003278:	4b8c      	ldr	r3, [pc, #560]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 800327a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1ea      	bne.n	800325c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	2b00      	cmp	r3, #0
 8003290:	f000 80a6 	beq.w	80033e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003294:	2300      	movs	r3, #0
 8003296:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003298:	4b84      	ldr	r3, [pc, #528]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 800329a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800329c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_OscConfig+0x2b4>
 80032a4:	2301      	movs	r3, #1
 80032a6:	e000      	b.n	80032aa <HAL_RCC_OscConfig+0x2b6>
 80032a8:	2300      	movs	r3, #0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00d      	beq.n	80032ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ae:	4b7f      	ldr	r3, [pc, #508]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 80032b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b2:	4a7e      	ldr	r2, [pc, #504]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 80032b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80032ba:	4b7c      	ldr	r3, [pc, #496]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 80032bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032c6:	2301      	movs	r3, #1
 80032c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ca:	4b79      	ldr	r3, [pc, #484]	@ (80034b0 <HAL_RCC_OscConfig+0x4bc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d118      	bne.n	8003308 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032d6:	4b76      	ldr	r3, [pc, #472]	@ (80034b0 <HAL_RCC_OscConfig+0x4bc>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a75      	ldr	r2, [pc, #468]	@ (80034b0 <HAL_RCC_OscConfig+0x4bc>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e2:	f7fd fbc7 	bl	8000a74 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ea:	f7fd fbc3 	bl	8000a74 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e18b      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032fc:	4b6c      	ldr	r3, [pc, #432]	@ (80034b0 <HAL_RCC_OscConfig+0x4bc>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d108      	bne.n	8003322 <HAL_RCC_OscConfig+0x32e>
 8003310:	4b66      	ldr	r3, [pc, #408]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003316:	4a65      	ldr	r2, [pc, #404]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 8003318:	f043 0301 	orr.w	r3, r3, #1
 800331c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003320:	e024      	b.n	800336c <HAL_RCC_OscConfig+0x378>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b05      	cmp	r3, #5
 8003328:	d110      	bne.n	800334c <HAL_RCC_OscConfig+0x358>
 800332a:	4b60      	ldr	r3, [pc, #384]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003330:	4a5e      	ldr	r2, [pc, #376]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 8003332:	f043 0304 	orr.w	r3, r3, #4
 8003336:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800333a:	4b5c      	ldr	r3, [pc, #368]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003340:	4a5a      	ldr	r2, [pc, #360]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800334a:	e00f      	b.n	800336c <HAL_RCC_OscConfig+0x378>
 800334c:	4b57      	ldr	r3, [pc, #348]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003352:	4a56      	ldr	r2, [pc, #344]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 8003354:	f023 0301 	bic.w	r3, r3, #1
 8003358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800335c:	4b53      	ldr	r3, [pc, #332]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003362:	4a52      	ldr	r2, [pc, #328]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 8003364:	f023 0304 	bic.w	r3, r3, #4
 8003368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d016      	beq.n	80033a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003374:	f7fd fb7e 	bl	8000a74 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800337a:	e00a      	b.n	8003392 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337c:	f7fd fb7a 	bl	8000a74 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	f241 3288 	movw	r2, #5000	@ 0x1388
 800338a:	4293      	cmp	r3, r2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e140      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003392:	4b46      	ldr	r3, [pc, #280]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 8003394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0ed      	beq.n	800337c <HAL_RCC_OscConfig+0x388>
 80033a0:	e015      	b.n	80033ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a2:	f7fd fb67 	bl	8000a74 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033a8:	e00a      	b.n	80033c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033aa:	f7fd fb63 	bl	8000a74 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e129      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033c0:	4b3a      	ldr	r3, [pc, #232]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1ed      	bne.n	80033aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033ce:	7ffb      	ldrb	r3, [r7, #31]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d105      	bne.n	80033e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d4:	4b35      	ldr	r3, [pc, #212]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 80033d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d8:	4a34      	ldr	r2, [pc, #208]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 80033da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d03c      	beq.n	8003466 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d01c      	beq.n	800342e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033f4:	4b2d      	ldr	r3, [pc, #180]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 80033f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033fa:	4a2c      	ldr	r2, [pc, #176]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003404:	f7fd fb36 	bl	8000a74 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800340c:	f7fd fb32 	bl	8000a74 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e0fa      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800341e:	4b23      	ldr	r3, [pc, #140]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 8003420:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0ef      	beq.n	800340c <HAL_RCC_OscConfig+0x418>
 800342c:	e01b      	b.n	8003466 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800342e:	4b1f      	ldr	r3, [pc, #124]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 8003430:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003434:	4a1d      	ldr	r2, [pc, #116]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 8003436:	f023 0301 	bic.w	r3, r3, #1
 800343a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343e:	f7fd fb19 	bl	8000a74 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003446:	f7fd fb15 	bl	8000a74 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e0dd      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003458:	4b14      	ldr	r3, [pc, #80]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 800345a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1ef      	bne.n	8003446 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80d1 	beq.w	8003612 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003470:	4b0e      	ldr	r3, [pc, #56]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b0c      	cmp	r3, #12
 800347a:	f000 808b 	beq.w	8003594 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d15e      	bne.n	8003544 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b09      	ldr	r3, [pc, #36]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a08      	ldr	r2, [pc, #32]	@ (80034ac <HAL_RCC_OscConfig+0x4b8>)
 800348c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003492:	f7fd faef 	bl	8000a74 <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003498:	e00c      	b.n	80034b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800349a:	f7fd faeb 	bl	8000a74 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d905      	bls.n	80034b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e0b3      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b4:	4b59      	ldr	r3, [pc, #356]	@ (800361c <HAL_RCC_OscConfig+0x628>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1ec      	bne.n	800349a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c0:	4b56      	ldr	r3, [pc, #344]	@ (800361c <HAL_RCC_OscConfig+0x628>)
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	4b56      	ldr	r3, [pc, #344]	@ (8003620 <HAL_RCC_OscConfig+0x62c>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6a11      	ldr	r1, [r2, #32]
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034d0:	3a01      	subs	r2, #1
 80034d2:	0112      	lsls	r2, r2, #4
 80034d4:	4311      	orrs	r1, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80034da:	0212      	lsls	r2, r2, #8
 80034dc:	4311      	orrs	r1, r2
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80034e2:	0852      	lsrs	r2, r2, #1
 80034e4:	3a01      	subs	r2, #1
 80034e6:	0552      	lsls	r2, r2, #21
 80034e8:	4311      	orrs	r1, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034ee:	0852      	lsrs	r2, r2, #1
 80034f0:	3a01      	subs	r2, #1
 80034f2:	0652      	lsls	r2, r2, #25
 80034f4:	4311      	orrs	r1, r2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80034fa:	06d2      	lsls	r2, r2, #27
 80034fc:	430a      	orrs	r2, r1
 80034fe:	4947      	ldr	r1, [pc, #284]	@ (800361c <HAL_RCC_OscConfig+0x628>)
 8003500:	4313      	orrs	r3, r2
 8003502:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003504:	4b45      	ldr	r3, [pc, #276]	@ (800361c <HAL_RCC_OscConfig+0x628>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a44      	ldr	r2, [pc, #272]	@ (800361c <HAL_RCC_OscConfig+0x628>)
 800350a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800350e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003510:	4b42      	ldr	r3, [pc, #264]	@ (800361c <HAL_RCC_OscConfig+0x628>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4a41      	ldr	r2, [pc, #260]	@ (800361c <HAL_RCC_OscConfig+0x628>)
 8003516:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800351a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fd faaa 	bl	8000a74 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003524:	f7fd faa6 	bl	8000a74 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e06e      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003536:	4b39      	ldr	r3, [pc, #228]	@ (800361c <HAL_RCC_OscConfig+0x628>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x530>
 8003542:	e066      	b.n	8003612 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003544:	4b35      	ldr	r3, [pc, #212]	@ (800361c <HAL_RCC_OscConfig+0x628>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a34      	ldr	r2, [pc, #208]	@ (800361c <HAL_RCC_OscConfig+0x628>)
 800354a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800354e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003550:	4b32      	ldr	r3, [pc, #200]	@ (800361c <HAL_RCC_OscConfig+0x628>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a31      	ldr	r2, [pc, #196]	@ (800361c <HAL_RCC_OscConfig+0x628>)
 8003556:	f023 0303 	bic.w	r3, r3, #3
 800355a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800355c:	4b2f      	ldr	r3, [pc, #188]	@ (800361c <HAL_RCC_OscConfig+0x628>)
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	4a2e      	ldr	r2, [pc, #184]	@ (800361c <HAL_RCC_OscConfig+0x628>)
 8003562:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8003566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800356a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fd fa82 	bl	8000a74 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003574:	f7fd fa7e 	bl	8000a74 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e046      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003586:	4b25      	ldr	r3, [pc, #148]	@ (800361c <HAL_RCC_OscConfig+0x628>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x580>
 8003592:	e03e      	b.n	8003612 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e039      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80035a0:	4b1e      	ldr	r3, [pc, #120]	@ (800361c <HAL_RCC_OscConfig+0x628>)
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 0203 	and.w	r2, r3, #3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d12c      	bne.n	800360e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035be:	3b01      	subs	r3, #1
 80035c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d123      	bne.n	800360e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d11b      	bne.n	800360e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d113      	bne.n	800360e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	3b01      	subs	r3, #1
 80035f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d109      	bne.n	800360e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	3b01      	subs	r3, #1
 8003608:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d001      	beq.n	8003612 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3720      	adds	r7, #32
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40021000 	.word	0x40021000
 8003620:	019f800c 	.word	0x019f800c

08003624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e11e      	b.n	800387a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800363c:	4b91      	ldr	r3, [pc, #580]	@ (8003884 <HAL_RCC_ClockConfig+0x260>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d910      	bls.n	800366c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b8e      	ldr	r3, [pc, #568]	@ (8003884 <HAL_RCC_ClockConfig+0x260>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 020f 	bic.w	r2, r3, #15
 8003652:	498c      	ldr	r1, [pc, #560]	@ (8003884 <HAL_RCC_ClockConfig+0x260>)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b8a      	ldr	r3, [pc, #552]	@ (8003884 <HAL_RCC_ClockConfig+0x260>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e106      	b.n	800387a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d073      	beq.n	8003760 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b03      	cmp	r3, #3
 800367e:	d129      	bne.n	80036d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003680:	4b81      	ldr	r3, [pc, #516]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e0f4      	b.n	800387a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003690:	f000 f972 	bl	8003978 <RCC_GetSysClockFreqFromPLLSource>
 8003694:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4a7c      	ldr	r2, [pc, #496]	@ (800388c <HAL_RCC_ClockConfig+0x268>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d93f      	bls.n	800371e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800369e:	4b7a      	ldr	r3, [pc, #488]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d033      	beq.n	800371e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d12f      	bne.n	800371e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036be:	4b72      	ldr	r3, [pc, #456]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036c6:	4a70      	ldr	r2, [pc, #448]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80036c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036ce:	2380      	movs	r3, #128	@ 0x80
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	e024      	b.n	800371e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d107      	bne.n	80036ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d109      	bne.n	80036fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e0c6      	b.n	800387a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036ec:	4b66      	ldr	r3, [pc, #408]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e0be      	b.n	800387a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80036fc:	f000 f8ce 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003700:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4a61      	ldr	r2, [pc, #388]	@ (800388c <HAL_RCC_ClockConfig+0x268>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d909      	bls.n	800371e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800370a:	4b5f      	ldr	r3, [pc, #380]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003712:	4a5d      	ldr	r2, [pc, #372]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 8003714:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003718:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800371a:	2380      	movs	r3, #128	@ 0x80
 800371c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800371e:	4b5a      	ldr	r3, [pc, #360]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f023 0203 	bic.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4957      	ldr	r1, [pc, #348]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800372c:	4313      	orrs	r3, r2
 800372e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003730:	f7fd f9a0 	bl	8000a74 <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	e00a      	b.n	800374e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003738:	f7fd f99c 	bl	8000a74 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e095      	b.n	800387a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	4b4e      	ldr	r3, [pc, #312]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 020c 	and.w	r2, r3, #12
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	429a      	cmp	r2, r3
 800375e:	d1eb      	bne.n	8003738 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d023      	beq.n	80037b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003778:	4b43      	ldr	r3, [pc, #268]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	4a42      	ldr	r2, [pc, #264]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800377e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003782:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0308 	and.w	r3, r3, #8
 800378c:	2b00      	cmp	r3, #0
 800378e:	d007      	beq.n	80037a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003790:	4b3d      	ldr	r3, [pc, #244]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003798:	4a3b      	ldr	r2, [pc, #236]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800379a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800379e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a0:	4b39      	ldr	r3, [pc, #228]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	4936      	ldr	r1, [pc, #216]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	2b80      	cmp	r3, #128	@ 0x80
 80037b8:	d105      	bne.n	80037c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80037ba:	4b33      	ldr	r3, [pc, #204]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	4a32      	ldr	r2, [pc, #200]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 80037c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c6:	4b2f      	ldr	r3, [pc, #188]	@ (8003884 <HAL_RCC_ClockConfig+0x260>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d21d      	bcs.n	8003810 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003884 <HAL_RCC_ClockConfig+0x260>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f023 020f 	bic.w	r2, r3, #15
 80037dc:	4929      	ldr	r1, [pc, #164]	@ (8003884 <HAL_RCC_ClockConfig+0x260>)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037e4:	f7fd f946 	bl	8000a74 <HAL_GetTick>
 80037e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ea:	e00a      	b.n	8003802 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ec:	f7fd f942 	bl	8000a74 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e03b      	b.n	800387a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003802:	4b20      	ldr	r3, [pc, #128]	@ (8003884 <HAL_RCC_ClockConfig+0x260>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d1ed      	bne.n	80037ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800381c:	4b1a      	ldr	r3, [pc, #104]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4917      	ldr	r1, [pc, #92]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800382a:	4313      	orrs	r3, r2
 800382c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0308 	and.w	r3, r3, #8
 8003836:	2b00      	cmp	r3, #0
 8003838:	d009      	beq.n	800384e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800383a:	4b13      	ldr	r3, [pc, #76]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	490f      	ldr	r1, [pc, #60]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 800384a:	4313      	orrs	r3, r2
 800384c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800384e:	f000 f825 	bl	800389c <HAL_RCC_GetSysClockFreq>
 8003852:	4602      	mov	r2, r0
 8003854:	4b0c      	ldr	r3, [pc, #48]	@ (8003888 <HAL_RCC_ClockConfig+0x264>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	091b      	lsrs	r3, r3, #4
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	490c      	ldr	r1, [pc, #48]	@ (8003890 <HAL_RCC_ClockConfig+0x26c>)
 8003860:	5ccb      	ldrb	r3, [r1, r3]
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	fa22 f303 	lsr.w	r3, r2, r3
 800386a:	4a0a      	ldr	r2, [pc, #40]	@ (8003894 <HAL_RCC_ClockConfig+0x270>)
 800386c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800386e:	4b0a      	ldr	r3, [pc, #40]	@ (8003898 <HAL_RCC_ClockConfig+0x274>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fd f8b2 	bl	80009dc <HAL_InitTick>
 8003878:	4603      	mov	r3, r0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	40022000 	.word	0x40022000
 8003888:	40021000 	.word	0x40021000
 800388c:	04c4b400 	.word	0x04c4b400
 8003890:	080041ec 	.word	0x080041ec
 8003894:	20000000 	.word	0x20000000
 8003898:	20000004 	.word	0x20000004

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80038a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f003 030c 	and.w	r3, r3, #12
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d102      	bne.n	80038b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80038ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	e047      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80038b4:	4b27      	ldr	r3, [pc, #156]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d102      	bne.n	80038c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80038c0:	4b26      	ldr	r3, [pc, #152]	@ (800395c <HAL_RCC_GetSysClockFreq+0xc0>)
 80038c2:	613b      	str	r3, [r7, #16]
 80038c4:	e03e      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80038c6:	4b23      	ldr	r3, [pc, #140]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b0c      	cmp	r3, #12
 80038d0:	d136      	bne.n	8003940 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038d2:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	091b      	lsrs	r3, r3, #4
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	3301      	adds	r3, #1
 80038e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d10c      	bne.n	800390a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038f0:	4a1a      	ldr	r2, [pc, #104]	@ (800395c <HAL_RCC_GetSysClockFreq+0xc0>)
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f8:	4a16      	ldr	r2, [pc, #88]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038fa:	68d2      	ldr	r2, [r2, #12]
 80038fc:	0a12      	lsrs	r2, r2, #8
 80038fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	617b      	str	r3, [r7, #20]
      break;
 8003908:	e00c      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800390a:	4a13      	ldr	r2, [pc, #76]	@ (8003958 <HAL_RCC_GetSysClockFreq+0xbc>)
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003912:	4a10      	ldr	r2, [pc, #64]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003914:	68d2      	ldr	r2, [r2, #12]
 8003916:	0a12      	lsrs	r2, r2, #8
 8003918:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800391c:	fb02 f303 	mul.w	r3, r2, r3
 8003920:	617b      	str	r3, [r7, #20]
      break;
 8003922:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003924:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	0e5b      	lsrs	r3, r3, #25
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	3301      	adds	r3, #1
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	e001      	b.n	8003944 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003944:	693b      	ldr	r3, [r7, #16]
}
 8003946:	4618      	mov	r0, r3
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
 8003958:	00f42400 	.word	0x00f42400
 800395c:	007a1200 	.word	0x007a1200

08003960 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003964:	4b03      	ldr	r3, [pc, #12]	@ (8003974 <HAL_RCC_GetHCLKFreq+0x14>)
 8003966:	681b      	ldr	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000000 	.word	0x20000000

08003978 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003978:	b480      	push	{r7}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800397e:	4b1e      	ldr	r3, [pc, #120]	@ (80039f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003988:	4b1b      	ldr	r3, [pc, #108]	@ (80039f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	3301      	adds	r3, #1
 8003994:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d10c      	bne.n	80039b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800399c:	4a17      	ldr	r2, [pc, #92]	@ (80039fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a4:	4a14      	ldr	r2, [pc, #80]	@ (80039f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039a6:	68d2      	ldr	r2, [r2, #12]
 80039a8:	0a12      	lsrs	r2, r2, #8
 80039aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039ae:	fb02 f303 	mul.w	r3, r2, r3
 80039b2:	617b      	str	r3, [r7, #20]
    break;
 80039b4:	e00c      	b.n	80039d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039b6:	4a12      	ldr	r2, [pc, #72]	@ (8003a00 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80039be:	4a0e      	ldr	r2, [pc, #56]	@ (80039f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039c0:	68d2      	ldr	r2, [r2, #12]
 80039c2:	0a12      	lsrs	r2, r2, #8
 80039c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039c8:	fb02 f303 	mul.w	r3, r2, r3
 80039cc:	617b      	str	r3, [r7, #20]
    break;
 80039ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039d0:	4b09      	ldr	r3, [pc, #36]	@ (80039f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	0e5b      	lsrs	r3, r3, #25
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	3301      	adds	r3, #1
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80039ea:	687b      	ldr	r3, [r7, #4]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	371c      	adds	r7, #28
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr
 80039f8:	40021000 	.word	0x40021000
 80039fc:	007a1200 	.word	0x007a1200
 8003a00:	00f42400 	.word	0x00f42400

08003a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a10:	2300      	movs	r3, #0
 8003a12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 8098 	beq.w	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a22:	2300      	movs	r3, #0
 8003a24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a26:	4b43      	ldr	r3, [pc, #268]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10d      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a32:	4b40      	ldr	r3, [pc, #256]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a36:	4a3f      	ldr	r2, [pc, #252]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a46:	60bb      	str	r3, [r7, #8]
 8003a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a39      	ldr	r2, [pc, #228]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a5a:	f7fd f80b 	bl	8000a74 <HAL_GetTick>
 8003a5e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a60:	e009      	b.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a62:	f7fd f807 	bl	8000a74 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d902      	bls.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	74fb      	strb	r3, [r7, #19]
        break;
 8003a74:	e005      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a76:	4b30      	ldr	r3, [pc, #192]	@ (8003b38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d0ef      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003a82:	7cfb      	ldrb	r3, [r7, #19]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d159      	bne.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a88:	4b2a      	ldr	r3, [pc, #168]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a92:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d01e      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d019      	beq.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003aa4:	4b23      	ldr	r3, [pc, #140]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ab0:	4b20      	ldr	r3, [pc, #128]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ad0:	4a18      	ldr	r2, [pc, #96]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d016      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae2:	f7fc ffc7 	bl	8000a74 <HAL_GetTick>
 8003ae6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae8:	e00b      	b.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aea:	f7fc ffc3 	bl	8000a74 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d902      	bls.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	74fb      	strb	r3, [r7, #19]
            break;
 8003b00:	e006      	b.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b02:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ec      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b10:	7cfb      	ldrb	r3, [r7, #19]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b16:	4b07      	ldr	r3, [pc, #28]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b24:	4903      	ldr	r1, [pc, #12]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b2c:	e008      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b2e:	7cfb      	ldrb	r3, [r7, #19]
 8003b30:	74bb      	strb	r3, [r7, #18]
 8003b32:	e005      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b34:	40021000 	.word	0x40021000
 8003b38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b3c:	7cfb      	ldrb	r3, [r7, #19]
 8003b3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b40:	7c7b      	ldrb	r3, [r7, #17]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d105      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b46:	4ba6      	ldr	r3, [pc, #664]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4a:	4aa5      	ldr	r2, [pc, #660]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00a      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b5e:	4ba0      	ldr	r3, [pc, #640]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b64:	f023 0203 	bic.w	r2, r3, #3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	499c      	ldr	r1, [pc, #624]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0302 	and.w	r3, r3, #2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b80:	4b97      	ldr	r3, [pc, #604]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b86:	f023 020c 	bic.w	r2, r3, #12
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	4994      	ldr	r1, [pc, #592]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b90:	4313      	orrs	r3, r2
 8003b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ba2:	4b8f      	ldr	r3, [pc, #572]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	498b      	ldr	r1, [pc, #556]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00a      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bc4:	4b86      	ldr	r3, [pc, #536]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	4983      	ldr	r1, [pc, #524]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0320 	and.w	r3, r3, #32
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003be6:	4b7e      	ldr	r3, [pc, #504]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bec:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	497a      	ldr	r1, [pc, #488]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c08:	4b75      	ldr	r3, [pc, #468]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	4972      	ldr	r1, [pc, #456]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	4969      	ldr	r1, [pc, #420]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c4c:	4b64      	ldr	r3, [pc, #400]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c52:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	4961      	ldr	r1, [pc, #388]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c6e:	4b5c      	ldr	r3, [pc, #368]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c74:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7c:	4958      	ldr	r1, [pc, #352]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d015      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c90:	4b53      	ldr	r3, [pc, #332]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c9e:	4950      	ldr	r1, [pc, #320]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003caa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cae:	d105      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cb0:	4b4b      	ldr	r3, [pc, #300]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d015      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cc8:	4b45      	ldr	r3, [pc, #276]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd6:	4942      	ldr	r1, [pc, #264]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	4a3c      	ldr	r2, [pc, #240]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cf2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d015      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d00:	4b37      	ldr	r3, [pc, #220]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d06:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d0e:	4934      	ldr	r1, [pc, #208]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d1e:	d105      	bne.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d20:	4b2f      	ldr	r3, [pc, #188]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4a2e      	ldr	r2, [pc, #184]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d2a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d015      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d38:	4b29      	ldr	r3, [pc, #164]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d3e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d46:	4926      	ldr	r1, [pc, #152]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d52:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d56:	d105      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d58:	4b21      	ldr	r3, [pc, #132]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	4a20      	ldr	r2, [pc, #128]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d62:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d015      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d70:	4b1b      	ldr	r3, [pc, #108]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d7e:	4918      	ldr	r1, [pc, #96]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d8e:	d105      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d90:	4b13      	ldr	r3, [pc, #76]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4a12      	ldr	r2, [pc, #72]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d015      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003da8:	4b0d      	ldr	r3, [pc, #52]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003daa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db6:	490a      	ldr	r1, [pc, #40]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dc6:	d105      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003dc8:	4b05      	ldr	r3, [pc, #20]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4a04      	ldr	r2, [pc, #16]	@ (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003dd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40021000 	.word	0x40021000

08003de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e049      	b.n	8003e8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fc fd38 	bl	8000880 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	4619      	mov	r1, r3
 8003e22:	4610      	mov	r0, r2
 8003e24:	f000 f898 	bl	8003f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
	...

08003e94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d001      	beq.n	8003eac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e042      	b.n	8003f32 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a21      	ldr	r2, [pc, #132]	@ (8003f40 <HAL_TIM_Base_Start+0xac>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d018      	beq.n	8003ef0 <HAL_TIM_Base_Start+0x5c>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec6:	d013      	beq.n	8003ef0 <HAL_TIM_Base_Start+0x5c>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1d      	ldr	r2, [pc, #116]	@ (8003f44 <HAL_TIM_Base_Start+0xb0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00e      	beq.n	8003ef0 <HAL_TIM_Base_Start+0x5c>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1c      	ldr	r2, [pc, #112]	@ (8003f48 <HAL_TIM_Base_Start+0xb4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d009      	beq.n	8003ef0 <HAL_TIM_Base_Start+0x5c>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1a      	ldr	r2, [pc, #104]	@ (8003f4c <HAL_TIM_Base_Start+0xb8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d004      	beq.n	8003ef0 <HAL_TIM_Base_Start+0x5c>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a19      	ldr	r2, [pc, #100]	@ (8003f50 <HAL_TIM_Base_Start+0xbc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d115      	bne.n	8003f1c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	4b17      	ldr	r3, [pc, #92]	@ (8003f54 <HAL_TIM_Base_Start+0xc0>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b06      	cmp	r3, #6
 8003f00:	d015      	beq.n	8003f2e <HAL_TIM_Base_Start+0x9a>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f08:	d011      	beq.n	8003f2e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f1a:	e008      	b.n	8003f2e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
 8003f2c:	e000      	b.n	8003f30 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3714      	adds	r7, #20
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40012c00 	.word	0x40012c00
 8003f44:	40000400 	.word	0x40000400
 8003f48:	40000800 	.word	0x40000800
 8003f4c:	40013400 	.word	0x40013400
 8003f50:	40014000 	.word	0x40014000
 8003f54:	00010007 	.word	0x00010007

08003f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a3c      	ldr	r2, [pc, #240]	@ (800405c <TIM_Base_SetConfig+0x104>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00f      	beq.n	8003f90 <TIM_Base_SetConfig+0x38>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f76:	d00b      	beq.n	8003f90 <TIM_Base_SetConfig+0x38>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a39      	ldr	r2, [pc, #228]	@ (8004060 <TIM_Base_SetConfig+0x108>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d007      	beq.n	8003f90 <TIM_Base_SetConfig+0x38>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a38      	ldr	r2, [pc, #224]	@ (8004064 <TIM_Base_SetConfig+0x10c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_Base_SetConfig+0x38>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a37      	ldr	r2, [pc, #220]	@ (8004068 <TIM_Base_SetConfig+0x110>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d108      	bne.n	8003fa2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800405c <TIM_Base_SetConfig+0x104>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01b      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fb0:	d017      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8004060 <TIM_Base_SetConfig+0x108>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d013      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a29      	ldr	r2, [pc, #164]	@ (8004064 <TIM_Base_SetConfig+0x10c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00f      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a28      	ldr	r2, [pc, #160]	@ (8004068 <TIM_Base_SetConfig+0x110>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d00b      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a27      	ldr	r2, [pc, #156]	@ (800406c <TIM_Base_SetConfig+0x114>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d007      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a26      	ldr	r2, [pc, #152]	@ (8004070 <TIM_Base_SetConfig+0x118>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d003      	beq.n	8003fe2 <TIM_Base_SetConfig+0x8a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a25      	ldr	r2, [pc, #148]	@ (8004074 <TIM_Base_SetConfig+0x11c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d108      	bne.n	8003ff4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a10      	ldr	r2, [pc, #64]	@ (800405c <TIM_Base_SetConfig+0x104>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00f      	beq.n	8004040 <TIM_Base_SetConfig+0xe8>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a11      	ldr	r2, [pc, #68]	@ (8004068 <TIM_Base_SetConfig+0x110>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00b      	beq.n	8004040 <TIM_Base_SetConfig+0xe8>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a10      	ldr	r2, [pc, #64]	@ (800406c <TIM_Base_SetConfig+0x114>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d007      	beq.n	8004040 <TIM_Base_SetConfig+0xe8>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a0f      	ldr	r2, [pc, #60]	@ (8004070 <TIM_Base_SetConfig+0x118>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_Base_SetConfig+0xe8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a0e      	ldr	r2, [pc, #56]	@ (8004074 <TIM_Base_SetConfig+0x11c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d103      	bne.n	8004048 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	615a      	str	r2, [r3, #20]
}
 800404e:	bf00      	nop
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40012c00 	.word	0x40012c00
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	40013400 	.word	0x40013400
 800406c:	40014000 	.word	0x40014000
 8004070:	40014400 	.word	0x40014400
 8004074:	40014800 	.word	0x40014800

08004078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800408c:	2302      	movs	r3, #2
 800408e:	e065      	b.n	800415c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d004      	beq.n	80040c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a2b      	ldr	r2, [pc, #172]	@ (800416c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d108      	bne.n	80040d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80040ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80040dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004168 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d018      	beq.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004106:	d013      	beq.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a18      	ldr	r2, [pc, #96]	@ (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00e      	beq.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a17      	ldr	r2, [pc, #92]	@ (8004174 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d009      	beq.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a12      	ldr	r2, [pc, #72]	@ (800416c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d004      	beq.n	8004130 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a13      	ldr	r2, [pc, #76]	@ (8004178 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d10c      	bne.n	800414a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004136:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	4313      	orrs	r3, r2
 8004140:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800415a:	2300      	movs	r3, #0
}
 800415c:	4618      	mov	r0, r3
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	40012c00 	.word	0x40012c00
 800416c:	40013400 	.word	0x40013400
 8004170:	40000400 	.word	0x40000400
 8004174:	40000800 	.word	0x40000800
 8004178:	40014000 	.word	0x40014000

0800417c <memset>:
 800417c:	4402      	add	r2, r0
 800417e:	4603      	mov	r3, r0
 8004180:	4293      	cmp	r3, r2
 8004182:	d100      	bne.n	8004186 <memset+0xa>
 8004184:	4770      	bx	lr
 8004186:	f803 1b01 	strb.w	r1, [r3], #1
 800418a:	e7f9      	b.n	8004180 <memset+0x4>

0800418c <__libc_init_array>:
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	4d0d      	ldr	r5, [pc, #52]	@ (80041c4 <__libc_init_array+0x38>)
 8004190:	4c0d      	ldr	r4, [pc, #52]	@ (80041c8 <__libc_init_array+0x3c>)
 8004192:	1b64      	subs	r4, r4, r5
 8004194:	10a4      	asrs	r4, r4, #2
 8004196:	2600      	movs	r6, #0
 8004198:	42a6      	cmp	r6, r4
 800419a:	d109      	bne.n	80041b0 <__libc_init_array+0x24>
 800419c:	4d0b      	ldr	r5, [pc, #44]	@ (80041cc <__libc_init_array+0x40>)
 800419e:	4c0c      	ldr	r4, [pc, #48]	@ (80041d0 <__libc_init_array+0x44>)
 80041a0:	f000 f818 	bl	80041d4 <_init>
 80041a4:	1b64      	subs	r4, r4, r5
 80041a6:	10a4      	asrs	r4, r4, #2
 80041a8:	2600      	movs	r6, #0
 80041aa:	42a6      	cmp	r6, r4
 80041ac:	d105      	bne.n	80041ba <__libc_init_array+0x2e>
 80041ae:	bd70      	pop	{r4, r5, r6, pc}
 80041b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041b4:	4798      	blx	r3
 80041b6:	3601      	adds	r6, #1
 80041b8:	e7ee      	b.n	8004198 <__libc_init_array+0xc>
 80041ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80041be:	4798      	blx	r3
 80041c0:	3601      	adds	r6, #1
 80041c2:	e7f2      	b.n	80041aa <__libc_init_array+0x1e>
 80041c4:	080041fc 	.word	0x080041fc
 80041c8:	080041fc 	.word	0x080041fc
 80041cc:	080041fc 	.word	0x080041fc
 80041d0:	08004200 	.word	0x08004200

080041d4 <_init>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	bf00      	nop
 80041d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041da:	bc08      	pop	{r3}
 80041dc:	469e      	mov	lr, r3
 80041de:	4770      	bx	lr

080041e0 <_fini>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	bf00      	nop
 80041e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e6:	bc08      	pop	{r3}
 80041e8:	469e      	mov	lr, r3
 80041ea:	4770      	bx	lr
